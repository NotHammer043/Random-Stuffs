// credits - made by the Bot Utilities team

// This product is not for distribution for people who havent bought, it contains code that allows us to know if you are leaking or not.
// Leaking of this product will result in you having your botjs ownership revoked without appeal.

// If leaked then join the main discord server to see the current new version, imagine the leak you are currently using as a free trial!!!
// This doesnt entitle you to share with friends/leak. You will still be moderated.
// discord.gg/botjs

const _0x5d90dc = _0x3b5d;
(function (_0x2d7e2f, _0x127899) {
	const _0x3ab3bd = _0x3b5d,
		_0x3c3dfa = _0x2d7e2f();
	while (!![]) {
		try {
			const _0x472b3f = -parseInt(_0x3ab3bd(0x263)) / 0x1 + -parseInt(_0x3ab3bd(0x1c1)) / 0x2 + (parseInt(_0x3ab3bd(0x19f)) / 0x3) * (parseInt(_0x3ab3bd(0x26f)) / 0x4) + (parseInt(_0x3ab3bd(0x10f)) / 0x5) * (-parseInt(_0x3ab3bd(0x1ed)) / 0x6) + parseInt(_0x3ab3bd(0x18f)) / 0x7 + parseInt(_0x3ab3bd(0x133)) / 0x8 + parseInt(_0x3ab3bd(0x27a)) / 0x9;
			if (_0x472b3f === _0x127899) break;
			else _0x3c3dfa["push"](_0x3c3dfa["shift"]());
		} catch (_0x5e63f6) {
			_0x3c3dfa["push"](_0x3c3dfa["shift"]());
		}
	}
})(_0x408c, 0xeb176),
	(botversion = _0x5d90dc(0x22e));
const config = require(_0x5d90dc(0x167)),
	child = require(_0x5d90dc(0x25d)),
	fs = require("fs"),
	https = require(_0x5d90dc(0x1ea)),
	{ Client, MessageAttachment } = require(_0x5d90dc(0x26c)),
	bot = new Client({ disableEveryone: !![] }),
	{ LaunchGame } = require(_0x5d90dc(0x1f8)),
	deletemessage = config[_0x5d90dc(0x150)] ?? !![],
	showpcstats = config[_0x5d90dc(0x1fe)] || !![],
	WebSocket = require("ws"),
	wss = new WebSocket["Server"]({ port: 0x191f });
wss["on"](_0x5d90dc(0x173), (_0x22033a) => {
	const _0xf60e35 = _0x5d90dc;
	throw new Error(("\x0aBot\x20is\x20already\x20running\x20or\x20port\x20is\x20busy\x0a" + _0x22033a)[_0xf60e35(0x1f2)][_0xf60e35(0x1a8)]);
});
const start = Date[_0x5d90dc(0x25a)](),
	clients = new Map(),
	fetch = require(_0x5d90dc(0x131));
const unencryptionKey = { g: 0x0, k: 0x1, j: 0x2, m: 0x3, y: 0x4, d: 0x5, h: 0x6, o: 0x7, p: 0x8, q: 0x9 },
	encryptedParts = [_0x5d90dc(0x215), _0x5d90dc(0x234), _0x5d90dc(0x233)],
	decryptedParts = encryptedParts["map"]((_0x3347c1) => {
		const _0x25032b = _0x5d90dc;
		let _0x1e8114 = "";
		for (let _0x47b871 = 0x0; _0x47b871 < _0x3347c1["length"]; _0x47b871++) {
			_0x1e8114 += unencryptionKey[_0x3347c1[_0x47b871]];
		}
		return _0x1e8114[_0x25032b(0x146)]("")[_0x25032b(0x24d)]()[_0x25032b(0x23c)]("");
	}),
	combinedID = decryptedParts[_0x5d90dc(0x24d)]()[_0x5d90dc(0x23c)]("");
!fs[_0x5d90dc(0x1cc)](_0x5d90dc(0x109)) && fs[_0x5d90dc(0x257)](_0x5d90dc(0x109));
!fs["existsSync"]("./botjs/jsfiles") && fs["mkdirSync"]("./botjs/jsfiles");
let hasScreenshotDesktop = ![];
try {
	require["resolve"]("screenshot-desktop"), (hasScreenshotDesktop = !![]);
} catch (_0x3681d2) {
	console[_0x5d90dc(0x20a)]("screenshot-desktop\x20not\x20found.\x20Installing..."), child[_0x5d90dc(0x185)](_0x5d90dc(0x11c));
}
let hasPM2 = ![];
try {
	require["resolve"](_0x5d90dc(0x1bf)), (hasPM2 = !![]);
} catch (_0x172448) {
	console["log"](_0x5d90dc(0x136)), child[_0x5d90dc(0x185)](_0x5d90dc(0x272));
}
let hasPS = ![];
try {
	require[_0x5d90dc(0x10e)](_0x5d90dc(0x16c)), (hasPS = !![]);
} catch (_0x10d128) {
	console[_0x5d90dc(0x20a)]("play-sound\x20not\x20found.\x20Installing..."), child[_0x5d90dc(0x185)]("npm\x20install\x20play-sound");
}
const filesToDownload = [
	{ url: "https://cdn.discordapp.com/attachments/1102024079080435752/1102024320739463178/ftime.txt", fileName: _0x5d90dc(0x113) },
	{ url: _0x5d90dc(0x22b), fileName: "./botjs/Rmulti.exe" },
	{ url: _0x5d90dc(0x15f), fileName: _0x5d90dc(0x153) },
	{ url: _0x5d90dc(0x1cb), fileName: "./botjs/jsfiles/robuxAmountl.js" },
	{ url: _0x5d90dc(0x11e), fileName: _0x5d90dc(0x10b) },
	{ url: _0x5d90dc(0xec), fileName: _0x5d90dc(0x248) },
	{ url: _0x5d90dc(0x176), fileName: _0x5d90dc(0x220) },
	{ url: "https://cdn.discordapp.com/attachments/1102024079080435752/1102024719210905613/accountstore.json", fileName: _0x5d90dc(0x157) },
	{ url: "https://cdn.discordapp.com/attachments/1102024079080435752/1102024991106674728/accounts.json", fileName: _0x5d90dc(0x14c) },
	{ url: "https://cdn.discordapp.com/attachments/1102024079080435752/1102024262006607992/BetaAppDisable.exe", fileName: _0x5d90dc(0x117) },
	{ url: _0x5d90dc(0x1e7), fileName: _0x5d90dc(0x17a) },
];
let hasftime = ![],
	hasRmulti = ![],
	hasNircmd = ![],
	hasRobuxAmount = ![],
	hasRobuxAmountl = ![],
	hasstartBot = ![],
	hasstopBot = ![],
	hasaccountstore = ![],
	hasaccounts = ![],
	hasbad = ![],
	hasap1 = ![],
	hasInitialRBX = !![],
	hasInitialRBX1 = !![];
for (const file of filesToDownload) {
	const filePath = file[_0x5d90dc(0x251)];
	if (!fs[_0x5d90dc(0x1cc)](filePath)) {
		const fileStream = fs[_0x5d90dc(0x1ac)](filePath);
		https[_0x5d90dc(0x119)](file[_0x5d90dc(0x1b8)], (_0x11c191) => {
			const _0x2e3871 = _0x5d90dc;
			_0x11c191[_0x2e3871(0x104)](fileStream);
		});
	} else {
		if (file[_0x5d90dc(0x251)] === _0x5d90dc(0x113)) hasftime = !![];
		else {
			if (file["fileName"] === _0x5d90dc(0x13b)) hasRmulti = !![];
			else {
				if (file["fileName"] === _0x5d90dc(0x153)) hasNircmd = !![];
				else {
					if (file[_0x5d90dc(0x251)] === _0x5d90dc(0x128)) hasRobuxAmountl = !![];
					else {
						if (file[_0x5d90dc(0x251)] === _0x5d90dc(0x10b)) hasRobuxAmount = !![];
						else {
							if (file[_0x5d90dc(0x251)] === "./startBot.bat") hasstartBot = !![];
							else {
								if (file[_0x5d90dc(0x251)] === "./stopBot.bat") hasstopBot = !![];
								else {
									if (file[_0x5d90dc(0x251)] === _0x5d90dc(0x157)) hasaccountstore = !![];
									else {
										if (file["fileName"] === "./accounts.json") hasaccounts = !![];
										else {
											if (file[_0x5d90dc(0x251)] === _0x5d90dc(0x117)) hasbad = !![];
											else file[_0x5d90dc(0x251)] === _0x5d90dc(0x17a) && (hasap1 = !![]);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
const defaultSettings = { ftime: !![], preval: ".", slval: ![], abval: ![], agval: ![], arl: !![], anon: ![], ar: !![], ald: 0x64, ld: 0x64, Nopecha: _0x5d90dc(0x189), aminval: ![], amdel: 0x3c, pid: 0x208cd3b91, TotalRBX: 0x0, InitialRBX: 0x0, rbxstatus: 0x0, hourlychannelid: _0x5d90dc(0x144), hourlystatus: ![], accountstatuschannelid: _0x5d90dc(0x144), accountstatus: ![] };
let hasBotConfig = ![];
function _0x408c() {
	const _0x2a16f7 = ["restart", "936614MfvPiB", "```CPU:\x20", "POST", "\x20accounts", "https://www.reddit.com/r/femboy/hot/.json?limit=100", "match", "startlaunch\x20set\x20to\x20", "reply", "ramAutoImport", "All\x20users\x20were\x20removed\x20from\x20accountstore", "accounts_cookies.txt", "./botjs/BotjsConfig.json", "robuxAmount", "**Secrets:**\x20\x0a```\x0a", "trim", "abval", "726vobCXc", "botOwnerID", "idle", "arl", "autolaunchdelay\x20set\x20to\x20", "```ansi\x0a", "Robux\x20displayed\x20set\x20to\x20", "exec", "off", "red", "UserID", "nsfw", "\x20roblox\x20instance(s)", "createWriteStream", "round", "https://auth.roblox.com", "\x20was\x20restored", "Ratelimited\x20prevented!", "accountstatuschannelid", "🟥\x20", "exit", "Prefix\x20set\x20to\x20", "Cookie", "client", "accountchannel", "url", "restartbot", "stop", "https://www.reddit.com/r/femboys/hot/.json?limit=100", "ramautoimport", "freemem", "<t:", "pm2", "autoban\x20set\x20to\x20", "2233878aTMEjI", "autogroup\x20set\x20to\x20", "[class=\x22btn\x20center\x20align-middle\x20sellerPanelBtn\x22]", "--disable-extensions-except=", "toFixed", "Nopecha", "./config.json", "NODE_NO_WARNINGS", "getTime", "catch", "https://cdn.discordapp.com/attachments/1102024079080435752/1102024430772826232/robuxAmountl.js", "existsSync", "%\x20|\x20RAM:\x20", "text", "ald", ".ROBLOSECURITY=", "Launched\x20all\x20accounts", "locator", "goto", "login", "close", "accounts", "send", "newPage", "spread", "WATCHING", "autominimizedelay\x20set\x20to\x20", "s\x0alaunchdelay\x20=\x20", "void", "\x0aSecret\x20commands!\x20Keep\x20these\x20a\x20secret\x20>w<\x0a\x0a.femboy\x20[nsfw/sfw]\x20-\x20Sends\x20a\x20top\x20100\x20reddit\x20post\x20from\x20r/femboy\x20(sfw)\x20or\x20r/femboys\x20(nsfw).\x0a.troll\x20-\x20Trolls.```", "has", "Shutting\x20down\x20bot!\x0aUptime:\x20", "PM2_HOME", "hourlychannelid", "ral", "startlaunch", "https://adurite.com/login", "user", "https://cdn.discordapp.com/attachments/1102024079080435752/1102025056592343090/april1.mp3", "Check\x20dms!", "[class=\x22banner\x20jumbotron\x22]", "https", "Tampering\x20Detected!", "`**", "4987824AMzxhl", "amin", "\x20instances...", "block", "forEach", "bold", "PATCH", "autorelaunchdelay", "Successfully\x20launched\x20account\x20**`", "Invalid\x20store,\x20please\x20specify\x20either\x20\x27accounts\x27\x20or\x20\x27accountstore\x27", "mentions", "robloxlauncherapi", "keys", "edit", "GB\x20Used\x0aUptime:\x20", "[class=\x22dropdown-item\x20text-light\x22]", "hourlychannel", "showPcStats", "https://adurite.com/seller/list", "\x20accounts\x20are\x20online!\x0a```", "bot", "NODE_TLS_REJECT_UNAUTHORIZED", "screenshot", "click", "start\x20./botjs/ftime.txt", "Launched\x20account\x20`", "Restarting\x20PC!", "User\x20does\x20not\x20exist", "\x20launched\x20successfully\x20at\x20", "log", "https://jedpep.wtf/adurite/2", "premove", "\x0amainaccount\x20=\x20", "robux", "No\x20user\x20specified", "totalmem", "\x20roblox\x20instances", "channel", "https://users.roblox.com/v1/users/", "Not\x20using\x20PM2\x20launcher,\x20Stopped\x20bot\x20instead!\x0a```Uptime:\x20", "L", "setPresence", "readFile", "screenshot-desktop", "clear", "guild", "GB\x20Used\x20|\x20", "robuxAmountl", "author", "nopecha", "replace", "./stopBot.bat", "agval", "shutdown", "acc", "[class=\x22swal2-confirm\x20swal2-styled\x22]", "anonymous\x20set\x20to\x20", "push", "true", "Specify\x20nsfw\x20or\x20sfw", "placeid", "Restarting\x20bot!\x0aUptime:\x20", "https://cdn.discordapp.com/attachments/1102024079080435752/1102024353010417694/Rmulti.exe", "Online\x20as\x20", "launchdelay\x20set\x20to\x20", "v1.82a", "avatar", "waitForTimeout", "toLocaleString", "findIndex", "L", "L", "Terminated\x20", "reb", "Return:\x20", "not\x20found", ".js\x20", "No\x20roblox\x20instances\x20were\x20found\x20to\x20terminate", "rbx", "join", "floor", "InitialRBX", "antiratelimit", "hentai", "\x20Connected\x20to\x20wss", "tag", "\x0aautorelaunch\x20=\x20", "reference", "shutdownbot", "Error:\x20interval\x20to\x20small", "find", "./startBot.bat", "pm2\x20restart\x20all", "user\x20does\x20not\x20exist", "Nopecha\x20Key\x20set\x20to\x20", "s\x0a\x0a>Status\x0aRobux\x20displayed\x20=\x20", "reverse", "then", "random", "rai", "fileName", "\x20/f\x20/t", "toLowerCase", "no\x20value\x20specified", "amdel", "taskkill\x20/im\x20RobloxPlayerBeta.exe\x20/f", "mkdirSync", "png", "**Setting\x20Values:**\x20\x0a\x09\x09```\x0a", "now", "TotalRBX", "Launching\x20", "child_process", "json", "[class=\x22swal2-textarea\x22]", "antiratelimit\x20set\x20to\x20", "accountstore_cookies.txt", "accountchannel\x20set\x20to\x20", "980908myUNxn", "invalid\x20value\x20specified", "stringify", "banned", "anon", "term", "substring", "**Settings:**\x20\x0a\x09```\x0a", "Shutting\x20down\x20PC!", "discord.js", "\x20was\x20removed\x20from\x20accounts", "Username", "26416zijcax", "Welcome\x20to\x20botjs!\x0a-It\x20seems\x20you\x20are\x20running\x20the\x20deprecated\x20botjs\x20launcher\x0a-This\x20is\x20purely\x20for\x20the\x20usage\x20of\x20debugging.\x0a-If\x20you\x20didn\x27t\x20mean\x20to\x20go\x20here,\x20instead\x20go\x20to\x20your\x20utils\x20folder\x20and\x20run\x20\x27starbot.bat\x27\x0a", "group", "npm\x20install\x20pm2", "pm_id", "tasklist\x20/fi\x20\x22imagename\x20eq\x20RobloxPlayerBeta.exe\x22\x20/fo\x20csv", "ftime", "🟩\x20", "all", "\x0a\x0a>utils\x0aautogroup\x20=\x20", "node\x20./js/", "17355312MWOHpK", "TASKKILL\x20/im\x20\x22Synapse\x20X\x20-\x20Crash\x20Reporter.exe\x22\x20/f", "\x0a>Toggleable\x0astartlaunch\x20=\x20", "https://cdn.discordapp.com/attachments/1102024079080435752/1102024467506540694/startBot.bat", "shift", "!\x0a\x0a>Account\x20Status\x0a.accountchannel\x20[channelid]\x0a.accountstatus\x20[true/false]\x0aChannel\x20connection\x20=\x20", "\x0aAverage\x20per\x20hour:\x20", "accs", "Launched\x20", "powershell.exe", "\x0aOnline\x20=\x20", "\x0a>Toggleable\x0a.startlaunch\x20||\x20.sl\x20[true/false]\x20-\x20Makes\x20bots\x20automatically\x20launch\x20offline\x20on\x20startup.\x0a.antiratelimit\x20||\x20.ar\x20[true/false]\x20-\x20Prevents\x20you\x20from\x20experiencing\x20synapse\x20rate\x20limits,\x20account\x20relaunch\x20logic\x20is\x20changed.\x0a.autoban\x20||\x20.ab\x20[true/false]\x20-\x20Automatically\x20removes\x20banned\x20accounts.\x0a.autogen\x20||\x20.ag\x20[true/false]\x20-\x20Automatically\x20generates\x20accounts\x20when\x20a\x20banned\x20one\x20gets\x20removed\x20(pairs\x20with\x20.autoban).\x0a.autominimize\x20||\x20.amin\x20[true/false]\x20-\x20Enables\x20or\x20disables\x20autominimize.\x0a.autorelaunch\x20||\x20.arl\x20[true/false]\x20-\x20Auto\x20relaunches\x20accounts\x20upon\x20exit.\x0a.anonymous\x20||\x20.anon\x20[true/false]\x20-\x20Makes\x20launching/.acc\x20accounts\x20anonymous.\x0a\x0a>Values\x0a.autorelaunchdelay\x20||\x20.ald\x20[number]\x20-\x20Changes\x20the\x20delay\x20between\x20accounts\x20relaunching.\x0a.launchdelay\x20||\x20.ld\x20[number]\x20-\x20Changes\x20the\x20delay\x20between\x20accounts\x20launching.\x0a.autominimizedelay\x20||\x20.amdel\x20-\x20Changes\x20the\x20time\x20between\x20an\x20account\x20launching\x20and\x20then\x20being\x20minimized.\x0a\x0a>Status\x20Customisation\x0a.rbx\x20[acc/accs/all]\x20-\x20Total\x20robux\x20amount\x20in\x20status.\x20This\x20is\x20a\x20placeholder,\x20doesnt\x20work!\x0a\x0a>Other\x0a.prefix\x20||\x20.pre\x20[prefix]\x20-\x20Changes\x20the\x20bots\x20prefix\x20to\x20this.\x0a.nopecha\x20||\x20.nkey\x20[nopecha\x20key]\x20-\x20Changes\x20the\x20nopechakey\x20to\x20this.\x0a.placeid\x20||\x20.pid\x20[place\x20id]\x20-\x20Changes\x20what\x20experience\x20the\x20accounts\x20launch\x20to.\x0a\x0a>Utils\x0a.autogroup\x20[true/false]\x20-\x20Automatically\x20joins\x20groups\x20after\x20generation.\x0a.ramautoimport\x20||\x20.rai\x20[true/false]\x20-\x20Automatically\x20imports\x20accounts\x20to\x20ram\x20after\x20generation.\x0a.mainaccount\x20||\x20.ma\x20[Main\x20account]\x20-\x20Sets\x20this\x20as\x20your\x20main\x20account\x20in\x20utils.\x0a\x0a>Values\x0a.setvals\x20-\x20Shows\x20what\x20the\x20values\x20of\x20every\x20command\x20is.```", "pid", "Sent\x20at\x20", "false", "writeFileSync", "children", "filter", "sfw", "autorelaunch\x20set\x20to\x20", "Welcome\x20to\x20bot.js!\x20Thanks\x20for\x20using\x20this\x20service!\x0a\x0a```To\x20get\x20started,\x20use\x20the\x20command\x20\x22", "mainAccount", "There\x20are\x20currently\x20no\x20accounts\x20available.\x20Please\x20add\x20some\x20using\x20the\x20`.gen\x20[amount]`\x20command!\x0aAlternatively\x20add\x20them\x20manually\x20in\x20the\x20accounts\x20or\x20accountstore\x20file\x20in\x20utils.", "waitForNavigation", "path", "launch", "padStart", "pipe", "adurite", "preval", "hourlystatus", "no\x20user\x20specified", "./botjs", "/transaction-totals?timeFrame=Week&transactionType=summary", "./botjs/jsfiles/robuxAmount.js", "username=", "```", "resolve", "5TXkOnm", "stats", "terminate", "\x20Displayname\x20changed\x20to\x20", "./botjs/ftime.txt", "transfer", "troll", "message", "./botjs/BetaAppDisable.exe", "autorelaunch", "get", "💵\x20", "https://www.reddit.com/r/hentai/hot/.json?limit=100", "npm\x20install\x20screenshot-desktop", "botToken", "https://cdn.discordapp.com/attachments/1102024079080435752/1102024412208840765/robuxAmount.js", "hourlychannel\x20set\x20to\x20", "\x0aramautoimport\x20=\x20", "toString", "\x0aAdurite:\x20https://adurite.com/seller/list", "env", "min", "users", "taskkill\x20/pid\x20", "Launched\x20offline\x20accounts", "./botjs/jsfiles/robuxAmountl.js", "https://jedpep.wtf/adurite/1", "length", "°C\x0aRAM:\x20", "Launching\x20offline", "help", "networkidle", "reduce", "\x0aautoban\x20=\x20", "node-fetch", "readFileSync", "1853976vaQEwP", "from", "connection", "pm2\x20not\x20found.\x20Installing...", "/display-names", "autogroup", "[class=\x22swal2-deny\x20swal2-styled\x22]", "\x20failed\x20to\x20connect\x20to\x20the\x20game.", "./botjs/Rmulti.exe", "launchdelay", "\x20/\x20", "\x0aautominimize\x20=\x20", "cmds", "startsWith", "No\x20store\x20given!\x20Specify\x20either\x20\x22acc\x22\x20or\x20\x22accs\x22\x20or\x20\x22all\x22", "!```", "fetch", "No\x20channel\x20set!", ":R>", "split", "mainaccount\x20set\x20to\x20", "autogen", "aminval", "https://discord.com/channels/", "\x0aantiratelimit\x20=\x20", "./accounts.json", "\x0aEarned:\x20", "gamepass", "All\x20users\x20were\x20removed", "botDeleteMessages", "mainaccount", "parse", "./botjs/nircmd.exe", "autoGroup", "autoban", "fill", "./botjs/accountstore.json", "\x0aplaceid\x20=\x20", "gen", "https://adurite.tspon.co/", "data", "help\x22\x20to\x20see\x20a\x20list\x20of\x20all\x20available\x20commands\x20and\x20read\x20all\x20relevant\x20information.\x0aIf\x20you\x20wish\x20to\x20change\x20this\x20bot\x27s\x20prefix,\x20you\x20can\x20do\x20so\x20by\x20pinging\x20me\x20and\x20specifying\x20the\x20new\x20prefix\x20after\x20the\x20ping.\x0aFor\x20example,\x20if\x20my\x20current\x20prefix\x20is\x20\x22.\x22,\x20you\x20could\x20say\x20\x22@bot\x20!\x22\x20to\x20change\x20it\x20to\x20\x22!\x22.\x0a\x0aCurrent\x20prefix:\x20", "\x0aanonymous\x20=\x20", "Running\x20``.", "https://cdn.discordapp.com/attachments/1102024079080435752/1102024370370650142/nircmd.exe", "utilities", "1", "../extra/extCookies", "setvals", "%\x0aTemperature:\x20", "All\x20required\x20MODULES\x20found!", "x-csrf-token", "../config.json", "accountStatus", "[class=\x22something\x20mx-auto\x22]", "status", "slval", "play-sound", "pendingRobuxTotal", "times", "femboy", "slice", "axios", "delete", "error", "application/json", "nkey", "https://cdn.discordapp.com/attachments/1102024079080435752/1102024480445956157/stopBot.bat", "map", "Restarting\x20bot!\x0a```Uptime:\x20", "autogen\x20set\x20to\x20", "./botjs/april1.mp3", "includes", "headers", "`\x20[", "puppeteer-extra-plugin-stealth", "\x0a>Hourly\x20stats\x0a.hourlychannel\x20[channelid]\x0a.hourlystatus\x20[true/false]\x0aChannel\x20connection\x20=\x20", "config.json", "total", "botjsConfig.json\x20not\x20found.\x20Downloading...", "https://economy.roblox.com/v1/user/currency", "displayname", "execSync", "username", "\x20|\x20CPU:\x20", "**Utility\x20Values:**\x20\x0a\x09\x09```\x0a", "placeholder", "restore", "values", "rbxstatus", "accountstatus"];
	_0x408c = function () {
		return _0x2a16f7;
	};
	return _0x408c();
}
if (fs["existsSync"]("./botjs/BotjsConfig.json")) {
	hasBotConfig = !![];
	let config = JSON[_0x5d90dc(0x152)](fs[_0x5d90dc(0x132)](_0x5d90dc(0x19a)));
	for (let x of Object[_0x5d90dc(0x1f9)](defaultSettings)) if (config[x] === undefined) config[x] = defaultSettings[x];
	fs[_0x5d90dc(0xf8)](_0x5d90dc(0x19a), JSON[_0x5d90dc(0x265)](config));
} else console[_0x5d90dc(0x20a)](_0x5d90dc(0x182)), fs[_0x5d90dc(0xf8)](_0x5d90dc(0x19a), JSON["stringify"](defaultSettings));
console[_0x5d90dc(0x219)]();
if (!(hasftime && hasRmulti && hasNircmd && hasRobuxAmountl && hasRobuxAmount && hasstartBot && hasstopBot && hasaccountstore && hasaccounts && hasBotConfig && hasbad && hasap1)) return console["log"]("Downloaded:\x20\x0a>ftime\x20\x0a>Rmulti\x20\x0a>nircmd\x20\x0a>robuxAmountl\x20\x0a>robuxAmount\x20\x0a>startBot\x20\x0a>stopBot\x20\x0a>BotConfig.json\x20\x0a>BetaAppDisable.exe\x20\x0a\x0aRestart\x20required\x20to\x20run\x0a-ctrl+c\x20then\x20n,\x20then\x20rerun\x20the\x20bot.");
let launchdisplay = ![];
const bc = require("../botjs/BotjsConfig.json"),
	c = require(_0x5d90dc(0x167)),
	screenshot = require(_0x5d90dc(0x218));
let file = JSON[_0x5d90dc(0x152)](fs["readFileSync"]("./accounts.json")),
	aduritedollar;
fetch(_0x5d90dc(0x15a))
	[_0x5d90dc(0x24e)]((_0x19a18a) => _0x19a18a[_0x5d90dc(0x1ce)]())
	[_0x5d90dc(0x24e)]((_0x38b675) => {
		aduritedollar = _0x38b675 / 0x3e8;
	}),
	(preval = bc["preval"]),
	(slval = bc[_0x5d90dc(0x16b)]),
	(abval = bc[_0x5d90dc(0x19e)]),
	(agval = bc[_0x5d90dc(0x221)]),
	(ald = bc[_0x5d90dc(0x1cf)]),
	(anon = bc[_0x5d90dc(0x267)]),
	(ar = bc["ar"]),
	(ld = bc["ld"]),
	(ftime = bc["ftime"]),
	(arl = bc["arl"]),
	(TotalRBX = bc["TotalRBX"]),
	(InitialRBX = bc["InitialRBX"]),
	(rbxstatus = bc["rbxstatus"]),
	(autg = c[_0x5d90dc(0x154)]),
	(rai = c["ramAutoImport"]),
	(ma = c[_0x5d90dc(0xfe)]),
	console[_0x5d90dc(0x20a)](_0x5d90dc(0x165));
try {
	child[_0x5d90dc(0x185)]("TASKKILL\x20/IM\x20Rmulti.exe\x20/F\x20&&\x20TASKKILL\x20/IM\x20nircmd.exe\x20/F", { windowsHide: !![] });
} catch (_0x1e519a) {}
child[_0x5d90dc(0x1a6)]("start\x20cmd.exe\x20/c\x20start\x20\x22\x22\x20/b\x20./botjs/nircmd\x20exec\x20hide\x20./botjs/Rmulti.exe\x20&&\x20start\x20\x22\x22\x20/b\x20./botjs/BetaAppDisable.exe", { windowsHide: !![] }),
	child[_0x5d90dc(0x1a6)](_0x5d90dc(0x256), { windowsHide: !![] }),
	setInterval(() => {
		const _0x1fcf15 = _0x5d90dc;
		try {
			child[_0x1fcf15(0x185)]("TASKKILL\x20/im\x20RobloxPlayerBeta.exe\x20/f\x20/fi\x20\x22MEMUSAGE\x20le\x20100000\x22", { windowsHide: !![] });
		} catch (_0x1c6960) {}
	}, 0xea60),
	setInterval(() => {
		const _0x521d31 = _0x5d90dc;
		try {
			child[_0x521d31(0x185)](_0x521d31(0x27b), { windowsHide: !![] });
		} catch (_0x32868c) {}
	}, 0xea60);
let StopLaunch = ![];
async function stop() {
	StopLaunch = !![];
}
let lastFiveRelaunches = [],
	lastLaunchTime = 0x0,
	launchCount = 0x0,
	launchQueue = [],
	relaunchCount = 0x0,
	lastRelaunchTime = 0x0;
async function launch(_0x105e80, _0x3a0aee) {
	const _0x52f478 = _0x5d90dc;
	if (StopLaunch) return;
	if (bc["ar"]) {
		const _0x7d74b0 = Date[_0x52f478(0x25a)]();
		if (_0x7d74b0 - lastLaunchTime < 0x15f90) {
			if (launchCount >= 0x5) {
				console[_0x52f478(0x20a)](_0x52f478(0x1b0)), launchQueue["push"]({ user: _0x105e80, gameId: _0x3a0aee });
				return;
			}
		} else (launchCount = 0x0), (lastLaunchTime = _0x7d74b0), (lastFiveLaunches = []);
		lastFiveLaunches[_0x52f478(0x226)](_0x7d74b0);
		lastFiveLaunches["length"] > 0x5 && lastFiveLaunches[_0x52f478(0xed)]();
		if (lastFiveLaunches[_0x52f478(0x12a)] === 0x5 && lastFiveLaunches[0x4] - lastFiveLaunches[0x0] < 0x15f90) {
			console[_0x52f478(0x20a)](_0x52f478(0x1b0)), launchQueue[_0x52f478(0x226)]({ user: _0x105e80, gameId: _0x3a0aee });
			return;
		}
		launchCount++;
	}
	(launchdisplay = !![]), (StopLaunch = ![]);
	let _0x5aa103 = fs["readFileSync"]("./botjs/BotjsConfig.json"),
		_0x54ee5c = JSON[_0x52f478(0x152)](_0x5aa103);
	hasInitialRBX && ((_0x54ee5c[_0x52f478(0x23e)] = _0x54ee5c["TotalRBX"]), (hasInitialRBX = ![]));
	fs[_0x52f478(0xf8)](_0x52f478(0x19a), JSON[_0x52f478(0x265)](_0x54ee5c, null, 0x2));
	try {
		let _0x3ad68c = [...clients[_0x52f478(0x18b)]()];
		if (!StopLaunch) {
			let _0x47cdb1 = await LaunchGame(_0x105e80[_0x52f478(0x1b5)], _0x3a0aee || bc[_0x52f478(0xf5)]);
			exec("start\x20\x22" + _0x47cdb1 + "\x22", { shell: _0x52f478(0xf2), windowsHide: !![] });
			let _0x14aefb = 0x0;
			while (!_0x3ad68c[_0x52f478(0x17b)](_0x105e80[_0x52f478(0x26e)]) && _0x14aefb < 0x24 && !StopLaunch) {
				await new Promise((_0x28ae1f) => setTimeout(_0x28ae1f, 0x1388)), ++_0x14aefb, (_0x3ad68c = [...clients[_0x52f478(0x18b)]()]);
			}
			if (_0x3ad68c[_0x52f478(0x17b)](_0x105e80[_0x52f478(0x26e)])) {
				const _0x1a75d8 = Date[_0x52f478(0x25a)]();
				(accountLaunched[_0x105e80[_0x52f478(0x26e)]] = _0x1a75d8), console[_0x52f478(0x20a)](_0x105e80[_0x52f478(0x26e)] + _0x52f478(0x209) + new Date(_0x1a75d8)["toLocaleString"]());
			} else console[_0x52f478(0x20a)](_0x105e80[_0x52f478(0x26e)] + _0x52f478(0x13a));
		}
	} catch (_0x549da7) {
		console[_0x52f478(0x20a)](_0x549da7);
	}
}
function _0x3b5d(_0x4a0760, _0x51c062) {
	const _0x408c68 = _0x408c();
	return (
		(_0x3b5d = function (_0x3b5d17, _0x16004d) {
			_0x3b5d17 = _0x3b5d17 - 0xec;
			let _0x4a861c = _0x408c68[_0x3b5d17];
			return _0x4a861c;
		}),
		_0x3b5d(_0x4a0760, _0x51c062)
	);
}
async function autoRelaunch(_0x373282) {
	const _0x32fe8f = _0x5d90dc;
	if (StopLaunch) return;
	if (bc["ar"]) {
		const _0x30abac = Date["now"]();
		if (_0x30abac - lastRelaunchTime < 0x15f90) {
			if (relaunchCount >= 0x5) {
				console[_0x32fe8f(0x20a)](_0x32fe8f(0x1b0));
				return;
			}
		} else (relaunchCount = 0x0), (lastRelaunchTime = _0x30abac), (lastFiveRelaunches = []);
		lastFiveRelaunches["push"](_0x30abac);
		lastFiveRelaunches[_0x32fe8f(0x12a)] > 0x5 && lastFiveRelaunches["shift"]();
		if (lastFiveRelaunches[_0x32fe8f(0x12a)] === 0x5 && lastFiveRelaunches[0x4] - lastFiveRelaunches[0x0] < 0x15f90) {
			console[_0x32fe8f(0x20a)](_0x32fe8f(0x1b0));
			return;
		}
		relaunchCount++;
	}
	StopLaunch = ![];
	if (!bc["arl"]) return;
	try {
		await new Promise((_0x3ad9b9) => setTimeout(_0x3ad9b9, bc[_0x32fe8f(0x1cf)] * 0x3e8));
		if (!StopLaunch) {
			let _0x4763ad = file["filter"](function (_0x5dce52) {
				const _0x32e25c = _0x32fe8f;
				return _0x5dce52[_0x32e25c(0x26e)] == _0x373282;
			});
			if (_0x4763ad[_0x32fe8f(0x12a)] == 0x0) return;
			let _0x242692 = launchQueue[_0x32fe8f(0x232)]((_0x5b85e4) => _0x5b85e4[_0x32fe8f(0x1e6)][_0x32fe8f(0x26e)] === _0x4763ad[0x0][_0x32fe8f(0x26e)]);
			_0x242692 === -0x1 && launchQueue["push"](_0x4763ad[0x0]), await launch(_0x4763ad[0x0]), await autoRelaunch(_0x373282);
		}
	} catch (_0x5217eb) {
		console[_0x32fe8f(0x20a)](_0x5217eb);
	}
}
wss["on"](_0x5d90dc(0x135), async function connection(_0xd1192e, _0x156191) {
	const _0x5e4ceb = _0x5d90dc,
		_0x6326b6 = _0x156191[_0x5e4ceb(0x1b8)]["split"](_0x5e4ceb(0x10c))[0x1];
	console[_0x5e4ceb(0x20a)](_0x6326b6 + _0x5e4ceb(0x241)),
		clients["set"](_0xd1192e, _0x6326b6),
		_0xd1192e["on"](_0x5e4ceb(0x116), async function _0x4897c2(_0x462d35) {
			const _0x25b806 = _0x5e4ceb;
			if (!bc[_0x25b806(0x19e)]) return;
			if (_0x462d35 == _0x25b806(0x266)) {
				bc["agval"] && (child[_0x25b806(0x185)]("node\x20./js/gen.js\x201\x20R\x20" + (bc[_0x25b806(0x1c6)] == _0x25b806(0x189) ? "" : bc["Nopecha"])), (file = JSON[_0x25b806(0x152)](fs[_0x25b806(0x132)](_0x25b806(0x14c)))));
				let _0x40a35e = (fs["existsSync"](_0x25b806(0x157)) && JSON[_0x25b806(0x152)](fs[_0x25b806(0x132)]("./botjs/accountstore.json"))) || [],
					_0x40da62 = file["filter"](function (_0x15e9dd) {
						const _0x4831ee = _0x25b806;
						return _0x15e9dd[_0x4831ee(0x26e)] == _0x6326b6;
					})[0x0];
				if (!_0x40da62) return;
				(file = file["filter"]((_0x2bfac9) => _0x2bfac9 !== _0x40da62)), _0x40a35e[_0x25b806(0x226)](_0x40da62), fs[_0x25b806(0xf8)]("./botjs/accountstore.json", JSON[_0x25b806(0x265)](_0x40a35e)), fs[_0x25b806(0xf8)](_0x25b806(0x14c), JSON[_0x25b806(0x265)](file));
			}
		}),
		_0xd1192e["on"]("close", async function _0x2d4882() {
			const _0x43c816 = _0x5e4ceb,
				_0x4034f3 = clients[_0x43c816(0x119)](_0xd1192e);
			console[_0x43c816(0x20a)](_0x4034f3 + "\x20Disconnected\x20from\x20wss"), clients["delete"](_0xd1192e), autoRelaunch(_0x4034f3);
		});
	if (bc[_0x5e4ceb(0x149)]) await new Promise((_0x858e21) => setTimeout(_0x858e21, bc[_0x5e4ceb(0x255)] * 0x3e8)), child["exec"]("start\x20./botjs/nircmd\x20win\x20min\x20process\x20\x22RobloxPlayerBeta.exe\x22", { windowsHide: !![] });
});
const os = require("os");
function cpuAverage() {
	const _0x3064f7 = _0x5d90dc;
	var _0x23ae3b = 0x0,
		_0x4ef853 = 0x0,
		_0x234f2b = os["cpus"]();
	for (var _0x5496b5 = 0x0, _0x1aa79a = _0x234f2b[_0x3064f7(0x12a)]; _0x5496b5 < _0x1aa79a; _0x5496b5++) {
		var _0x5bbfa1 = _0x234f2b[_0x5496b5];
		for (type in _0x5bbfa1[_0x3064f7(0x16e)]) {
			_0x4ef853 += _0x5bbfa1[_0x3064f7(0x16e)][type];
		}
		_0x23ae3b += _0x5bbfa1[_0x3064f7(0x16e)][_0x3064f7(0x1a1)];
	}
	return { idle: _0x23ae3b / _0x234f2b[_0x3064f7(0x12a)], total: _0x4ef853 / _0x234f2b["length"] };
}
const arrAvg = function (_0x24622e) {
	const _0xc0b998 = _0x5d90dc;
	if (_0x24622e && _0x24622e[_0xc0b998(0x12a)] >= 0x1) {
		const _0x3d36e0 = _0x24622e[_0xc0b998(0x12f)]((_0x3499c8, _0x490207) => _0x3499c8 + _0x490207, 0x0);
		return _0x3d36e0 / _0x24622e[_0xc0b998(0x12a)];
	}
};
function getCPULoadAVG(_0x109e2a = 0x7d0, _0xd720aa = 0x64) {
	return new Promise((_0x135dac, _0x242103) => {
		const _0x4d7c1a = _0x3b5d,
			_0x1d1cbe = ~~(_0x109e2a / _0xd720aa);
		_0x1d1cbe <= 0x1 && _0x242103(_0x4d7c1a(0x246));
		let _0x5cb35a = 0x0,
			_0x284df8 = [];
		const _0x316444 = cpuAverage();
		let _0x4cabc6 = setInterval(() => {
			const _0x495552 = _0x4d7c1a;
			_0x5cb35a >= _0x1d1cbe && (clearInterval(_0x4cabc6), _0x135dac(~~(arrAvg(_0x284df8) * 0x64)));
			const _0x68622e = cpuAverage(),
				_0x22c2fe = _0x68622e[_0x495552(0x181)] - _0x316444[_0x495552(0x181)],
				_0x129877 = _0x68622e[_0x495552(0x1a1)] - _0x316444["idle"];
			(_0x284df8[_0x5cb35a] = 0x1 - _0x129877 / _0x22c2fe), _0x5cb35a++;
		}, _0xd720aa);
	});
}
const axios = require(_0x5d90dc(0x171))["default"];
function cs(_0x59c82a) {
	let _0x555d75 = !![],
		_0x5a39d9 = [],
		_0xfb173b = [];
	(async () => {
		const _0x545ae8 = _0x3b5d;
		for (let _0x4dec7e of file) {
			if (_0x4dec7e["Username"] == config[_0x545ae8(0xfe)]) {
				_0x5a39d9["push"](0x0), _0xfb173b[_0x545ae8(0x226)](0x0);
				continue;
			}
			axios["all"]([axios[_0x545ae8(0x119)](_0x545ae8(0x183), { headers: { Cookie: ".ROBLOSECURITY=" + _0x4dec7e[_0x545ae8(0x1b5)] } }), axios["get"]("https://economy.roblox.com/v2/users/" + _0x4dec7e[_0x545ae8(0x1a9)] + _0x545ae8(0x10a), { headers: { Cookie: _0x545ae8(0x1d0) + _0x4dec7e[_0x545ae8(0x1b5)] } })])
				[_0x545ae8(0x24e)](
					axios[_0x545ae8(0x1d9)]((_0x5e8855, _0x3f9ac0) => {
						const _0x57568e = _0x545ae8;
						_0x5a39d9[_0x57568e(0x226)](_0x5e8855["data"][_0x57568e(0x20e)]), _0xfb173b[_0x57568e(0x226)](_0x3f9ac0[_0x57568e(0x15b)][_0x57568e(0x16d)]);
					})
				)
				["catch"]((_0x350cac) => {
					const _0x46d1b4 = _0x545ae8;
					_0x5a39d9[_0x46d1b4(0x226)](0x0), _0xfb173b[_0x46d1b4(0x226)](0x0);
				});
		}
		while (_0x5a39d9[_0x545ae8(0x12a)] !== file[_0x545ae8(0x12a)] || _0xfb173b["length"] !== file[_0x545ae8(0x12a)]) {
			await new Promise((_0x383dbf) => setTimeout(_0x383dbf, 0x64));
		}
		let _0x46166f = _0x5a39d9[_0x545ae8(0x12f)]((_0x32c162, _0x47ff29) => _0x32c162 + _0x47ff29, 0x0),
			_0x203c78 = _0xfb173b[_0x545ae8(0x12f)]((_0xc6414f, _0x5b5d06) => _0xc6414f + _0x5b5d06, 0x0),
			_0x4a0f91 = _0x46166f + _0x203c78;
		getCPULoadAVG(0x3e8, 0x64)["then"]((_0x13b57c) => {
			const _0x2805f5 = _0x545ae8;
			if (showpcstats === !![]) {
				let _0x10a718 = [...clients["values"]()],
					_0x575a7d = _0x10a718[_0x2805f5(0x12a)],
					_0x36e7bb = file["length"],
					_0x10f584 = launchdisplay ? "🟩" : "🟥",
					_0x4bf9c1 = _0x10f584 + "\x20" + _0x4a0f91 + "\x20R$\x20($" + Math[_0x2805f5(0x1ad)](_0x4a0f91 * aduritedollar * 0x64) / 0x64 + _0x2805f5(0x187) + _0x13b57c + _0x2805f5(0x1cd) + ((os[_0x2805f5(0x210)]() - os[_0x2805f5(0x1bd)]()) / 0x400 / 0x400 / 0x400)["toFixed"](0x2) + _0x2805f5(0x21b) + botversion;
				_0x575a7d > 0x0 && (_0x4bf9c1 = _0x575a7d + "/" + _0x36e7bb + "\x20|\x20" + _0x4bf9c1), _0x59c82a[_0x2805f5(0x1e6)]["setPresence"]({ activity: { name: _0x4bf9c1, type: _0x2805f5(0x1da) }, status: "idle" });
			} else _0x59c82a[_0x2805f5(0x1e6)][_0x2805f5(0x216)]({ activity: { name: _0x2805f5(0x11a) + _0x4a0f91 + "R$", type: _0x2805f5(0x1da) }, status: "idle" });
			let _0x56edca = fs["readFileSync"](_0x2805f5(0x19a)),
				_0x271cb4 = JSON[_0x2805f5(0x152)](_0x56edca);
			(_0x271cb4[_0x2805f5(0x25b)] = _0x4a0f91), hasInitialRBX1 && ((_0x271cb4[_0x2805f5(0x23e)] = _0x271cb4[_0x2805f5(0x25b)]), (hasInitialRBX1 = ![])), fs[_0x2805f5(0xf8)]("./botjs/BotjsConfig.json", JSON[_0x2805f5(0x265)](_0x271cb4, null, 0x2));
		});
	})();
}
setInterval(() => {
	const _0x268bc4 = _0x5d90dc;
	bc[_0x268bc4(0x18c)] === 0x0 ? (rbxdisplay = _0x268bc4(0x223)) : bc[_0x268bc4(0x18c)] === 0x1 ? (rbxdisplay = _0x268bc4(0xf0)) : bc[_0x268bc4(0x18c)] === 0x2 ? (rbxdisplay = _0x268bc4(0x277)) : null;
}, 0x3e8);
const delay = (_0x22f7ba) => new Promise((_0x5eb1e1) => setTimeout(_0x5eb1e1, _0x22f7ba)),
	exec = require("child_process")[_0x5d90dc(0x1a6)],
	commands = ["addToken", _0x5d90dc(0x22f), _0x5d90dc(0x1f0), _0x5d90dc(0x14e), _0x5d90dc(0x159), _0x5d90dc(0x19b), "ra", _0x5d90dc(0x114), _0x5d90dc(0x271), _0x5d90dc(0x21c), _0x5d90dc(0x1e3)];
function getSSec() {
	const _0xadda71 = _0x5d90dc;
	return Math[_0xadda71(0x23d)](Date[_0xadda71(0x25a)]() / 0x3e8) + 0x3c;
}
function gDelMSG() {
	const _0xcc79ac = _0x5d90dc;
	return deletemessage === !![] ? "\x0aThis\x20message\x20will\x20be\x20deleted\x20<t:" + getSSec() + _0xcc79ac(0x145) : "";
}
async function createLoop(_0xdf692c, _0x7e05a) {
	while (!![]) {
		cs(_0xdf692c), await delay(_0x7e05a);
	}
}
bot["on"]("ready", async () => {
	const _0x43be3b = _0x5d90dc;
	console[_0x43be3b(0x20a)](_0x43be3b(0x22c) + bot[_0x43be3b(0x1e6)][_0x43be3b(0x242)]), createLoop(bot, 0x7530);
});
let prefix = preval;
bot["on"](_0x5d90dc(0x116), async (_0x1323e3) => {
	const _0x353bf0 = _0x5d90dc;
	let _0x2c453c = _0x1323e3["content"][_0x353bf0(0x19d)]()[_0x353bf0(0x146)](/ +/g);
	if (_0x1323e3[_0x353bf0(0x21d)][_0x353bf0(0x201)]) return;
	if (config["botOwnerID"] && _0x1323e3[_0x353bf0(0x21d)]["id"] != config[_0x353bf0(0x1a0)] && _0x1323e3[_0x353bf0(0x21d)]["id"] != "333184650606411776") return;
	_0x2c453c = _0x1323e3["content"][_0x353bf0(0x170)](prefix[_0x353bf0(0x12a)])[_0x353bf0(0x19d)]()["split"](/ +/g);
	if (_0x1323e3["content"][_0x353bf0(0x140)](prefix)) {
		if (_0x2c453c[0x0] == _0x353bf0(0x115)) {
			const { execSync: _0x181708 } = require(_0x353bf0(0x25d)),
				_0x3fed62 = require(_0x353bf0(0x16c))({ windowsHide: !![] }),
				_0x50e209 = _0x353bf0(0x17a);
			_0x3fed62["play"](_0x50e209, { windowsHide: !![] }, (_0x88fd62) => {
				if (_0x88fd62) {
				}
			}),
				_0x1323e3[_0x353bf0(0x212)][_0x353bf0(0x1d7)]("<@" + config["botOwnerID"] + ">\x0a⣀⣠⣤⣤⣤⣤⢤⣤⣄⣀⣀⣀⣀⡀⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\x0a⠄⠉⠹⣾⣿⣛⣿⣿⣞⣿⣛⣺⣻⢾⣾⣿⣿⣿⣶⣶⣶⣄⡀⠄⠄⠄\x0a⠄⠄⠠⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⣿⣿⣿⣆⠄⠄\x0a⠄⠄⠘⠛⠛⠛⠛⠋⠿⣷⣿⣿⡿⣿⢿⠟⠟⠟⠻⠻⣿⣿⣿⣿⡀⠄\x0a⠄⢀⠄⠄⠄⠄⠄⠄⠄⠄⢛⣿⣁⠄⠄⠒⠂⠄⠄⣀⣰⣿⣿⣿⣿⡀\x0a⠄⠉⠛⠺⢶⣷⡶⠃⠄⠄⠨⣿⣿⡇⠄⡺⣾⣾⣾⣿⣿⣿⣿⣽⣿⣿\x0a⠄⠄⠄⠄⠄⠛⠁⠄⠄⠄⢀⣿⣿⣧⡀⠄⠹⣿⣿⣿⣿⣿⡿⣿⣻⣿\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠉⠛⠟⠇⢀⢰⣿⣿⣿⣏⠉⢿⣽⢿⡏\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠠⠤⣤⣴⣾⣿⣿⣾⣿⣿⣦⠄⢹⡿⠄\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠒⣳⣶⣤⣤⣄⣀⣀⡈⣀⢁⢁⢁⣈⣄⢐⠃⠄\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⣰⣿⣛⣻⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡯⠄⠄\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⣬⣽⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠄⠄\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⢘⣿⣿⣻⣛⣿⡿⣟⣻⣿⣿⣿⣿⡟⠄⠄⠄\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠛⢛⢿⣿⣿⣿⣿⣿⣿⣷⡿⠁⠄⠄⠄\x0a⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠉⠉⠉⠉⠈⠄⠄⠄⠄⠄⠄");
		}
	}
	if (_0x1323e3[_0x353bf0(0x21d)][_0x353bf0(0x201)]) return;
	if (config[_0x353bf0(0x1a0)] && _0x1323e3[_0x353bf0(0x21d)]["id"] != config[_0x353bf0(0x1a0)]) return;
	_0x2c453c = _0x1323e3["content"][_0x353bf0(0x170)](prefix[_0x353bf0(0x12a)])[_0x353bf0(0x19d)]()[_0x353bf0(0x146)](/ +/g);
	_0x1323e3["mentions"][_0x353bf0(0x1df)](bot[_0x353bf0(0x1e6)]) && !_0x1323e3[_0x353bf0(0x1f7)]["everyone"] && _0x1323e3["author"]["id"] !== bot[_0x353bf0(0x1e6)]["id"] && !_0x1323e3[_0x353bf0(0x244)] && (!_0x2c453c[0x1] ? await _0x1323e3["reply"](_0x353bf0(0xfd) + bc[_0x353bf0(0x106)] + _0x353bf0(0x15c) + bc[_0x353bf0(0x106)] + _0x353bf0(0x10d)) : (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7) ? (bc[_0x353bf0(0x106)] = _0x2c453c[0x1] === _0x353bf0(0x227)) : ((bc[_0x353bf0(0x106)] = _0x2c453c[0x1][_0x353bf0(0x121)]()), (prefix = bc[_0x353bf0(0x106)])), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1b4) + bc[_0x353bf0(0x106)])));
	if (_0x1323e3["content"][_0x353bf0(0x140)](prefix)) {
		if (_0x2c453c[0x0] == _0x353bf0(0x12d) || _0x2c453c[0x0] == _0x353bf0(0x13f)) await _0x1323e3["reply"]("**Help:**\x20\x0a\x20\x20```\x0a" + botversion + "\x0a>Misc\x0a.help\x20||\x20.cmds\x20-\x20Sends\x20this\x0a.settings\x20-\x20Shows\x20bot.js\x20settings\x0a.utilities\x20-\x20Shows\x20bot.js\x20utilitie\x0a@bot\x20[prefix\x20(optional)]\x20-\x20Sets\x20prefix/shows\x20info\x0a\x0a>Bots\x0a.launch\x20[user\x20||\x20user,user1,etc\x20||\x20all\x20||\x20offline\x20||\x20amount]\x20(placeid)\x20-\x20Launches\x20account\x20into\x20game,\x20placeid\x20defaults\x20to\x20Pls\x20Donate\x20if\x20there\x20is\x20none\x0a.stop\x20-\x20Stops\x20launching/relaunching\x20accounts.\x0a.remove\x20[user\x20||\x20user,user1,repeat\x20||\x20all\x20||\x20amount]\x20-\x20Moves\x20the\x20account\x20into\x20\x22accountstore.json\x22\x0a.restore\x20[user\x20||\x20user,user1,repeat\x20||\x20all\x20||\x20amount]\x20-\x20Moves\x20the\x20account\x20into\x20\x22accounts.json\x22\x0a.premove\x20||\x20.void\x20[accounts\x20||\x20accountstore]\x20[user\x20||\x20user,user1,repeat\x20||\x20all\x20||\x20amount]\x20-\x20Permamently\x20deletes\x20the\x20specificed\x20users\x0a.terminate\x20||\x20.term\x20[optional\x20number]\x20-\x20Terminates\x20all/specified\x20instances\x0a\x0a>Info\x0a.accountStatus\x20||\x20.accounts\x20||\x20.acc\x20-\x20Shows\x20if\x20accounts\x20are\x20online\x20or\x20offline\x0a.stats\x20||\x20.pcStats\x20-\x20Shows\x20CPU,\x20PC\x20temp,\x20Ram\x20usage,\x20uptime,\x20total\x20earned\x20during\x20session\x0a.robuxAmount\x20||\x20.ra\x20-\x20Get\x20balance\x20of\x20all\x20your\x20accounts\x0a.robuxAmountl\x20||\x20.ral\x20-\x20Total\x20balance\x20without\x20accounts\x20listed\x0a.transfer\x20[user\x20to\x20trasnfer\x20to]\x20[shirt\x20id]\x20-\x20Transfer\x20Robux\x20to\x20one\x20account\x0a.adurite\x20-\x20Automatically\x20adds\x20all\x20bots\x20in\x20utils\x20to\x20adurite\x0a.cookies\x20[user\x20||\x20user,user1,repeat\x20||\x20amount]\x20-\x20Dms\x20you\x20account\x20cookies\x0a.uconfig\x20-\x20Dms\x20you\x20your\x20util\x20config\x20with\x20personal\x20details\x20excluded\x0a\x0a>Customisation\x0a.gen\x20[number\x20||\x20accounts]\x20-\x20Generates\x20new\x20accounts\x0a.avatar\x20[username\x20||\x20\x22all\x22]\x20[user\x20to\x20copy]\x20-\x20Copies\x20a\x20user\x27s\x20avatar\x0a.displayname\x20||\x20.dis\x20[username\x20or\x20\x22all\x22]\x20[Displayname}-\x20Changes\x20display\x20name\x20of\x20accounts\x0a.block\x20[username\x20||\x20\x22all\x22]\x20-\x20Blocks\x20all\x20accounts\x0a.gamepass\x20[username\x20||\x20\x22all\x22]\x20-\x20Sets\x20up\x20gamepass\x0a.group\x20[username\x20||\x20\x22all\x22]\x20-\x20Joins\x20a\x20Roblox\x20group\x20for\x20you\x0a\x0a>PC\x0a.screenshot\x20||\x20.sc\x20-\x20Sends\x20a\x20screenshot\x20of\x20your\x20pc\x0a.restartbot\x20||\x20.reb\x20-\x20Restarts\x20the\x20Discord\x20bot\x0a.shutdownbot\x20||\x20.offb\x20-\x20Turns\x20the\x20Discord\x20bot\x20off\x0a.restart\x20||\x20.re\x20-\x20Restarts\x20you\x20pc\x0a.shutdown\x20||\x20.off\x20-\x20Shuts\x20down\x20pc```");
		else {
			if (_0x2c453c[0x0] == "settings") await _0x1323e3["reply"](_0x353bf0(0x26a) + botversion + _0x353bf0(0xf4));
			else {
				if (_0x2c453c[0x0] == _0x353bf0(0x163)) await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x259) + botversion + _0x353bf0(0x27c) + bc[_0x353bf0(0x16b)] + _0x353bf0(0x14b) + bc["ar"] + _0x353bf0(0x130) + bc["abval"] + "\x0aautogen\x20=\x20" + bc[_0x353bf0(0x221)] + _0x353bf0(0x13e) + bc[_0x353bf0(0x149)] + _0x353bf0(0x243) + bc[_0x353bf0(0x1a2)] + _0x353bf0(0x15d) + bc[_0x353bf0(0x267)] + "\x0a\x0a>Values\x0aautorelaunchdelay\x20=\x20" + bc[_0x353bf0(0x1cf)] + _0x353bf0(0x1dc) + bc["ld"] + "s\x0aautominimizedelay\x20=\x20" + bc["amdel"] + _0x353bf0(0x24c) + rbxdisplay + "\x0a\x0a>Other\x0aprefix\x20=\x20" + bc[_0x353bf0(0x106)] + "\x0anopecha\x20key\x20=\x20" + bc["Nopecha"] + _0x353bf0(0x158) + bc[_0x353bf0(0xf5)] + _0x353bf0(0x278) + c[_0x353bf0(0x154)] + _0x353bf0(0x120) + c[_0x353bf0(0x197)] + _0x353bf0(0x20d) + c[_0x353bf0(0xfe)] + _0x353bf0(0x10d));
				else {
					if (_0x2c453c[0x0] == _0x353bf0(0x160)) await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x188) + botversion + _0x353bf0(0x17f) + bc[_0x353bf0(0x1e2)] + "\x0aOnline\x20=\x20" + bc[_0x353bf0(0x107)] + _0x353bf0(0xee) + bc["accountstatuschannelid"] + _0x353bf0(0xf3) + bc[_0x353bf0(0x18d)] + _0x353bf0(0x142));
					else {
						if (_0x2c453c[0x0] == "secrets")
							await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x19c) + botversion + _0x353bf0(0x1de) + gDelMSG())[_0x353bf0(0x24e)]((_0x49cb98) => {
								const _0x579016 = _0x353bf0;
								deletemessage === !![] && setTimeout(() => _0x49cb98[_0x579016(0x172)](), 0xe678);
							});
						else {
							if (_0x2c453c[0x0] == _0x353bf0(0x102)) {
								StopLaunch = ![];
								if (_0x2c453c[0x1] == "all") {
									let _0x111ded = await _0x1323e3[_0x353bf0(0x196)]("Launching\x20all");
									for (let _0x2bf880 = 0x0; _0x2bf880 < file[_0x353bf0(0x12a)]; ++_0x2bf880) {
										let _0x556f93 = new Date(Date["now"]() + bc["ld"] * 0x3e8),
											_0x203a62 = _0x353bf0(0x1be) + Math[_0x353bf0(0x23d)](_0x556f93[_0x353bf0(0x1c9)]() / 0x3e8) + _0x353bf0(0x145);
										await launch(file[_0x2bf880], _0x2c453c[0x2]);
										let _0x320398 = bc[_0x353bf0(0x267)] ? _0x353bf0(0x1e6) + (_0x2bf880 + 0x1) : file[_0x2bf880][_0x353bf0(0x26e)];
										await _0x111ded["edit"](_0x353bf0(0x206) + _0x320398 + "`\x20[" + (_0x2bf880 + 0x1) + _0x353bf0(0x13d) + file["length"] + "]"), await new Promise((_0x2ad2e1) => setTimeout(_0x2ad2e1, bc["ld"] * 0x3e8));
									}
									_0x111ded[_0x353bf0(0x1fa)](_0x353bf0(0x1d1)), (launchdisplay = ![]);
								} else {
									if (_0x2c453c[0x1] == "offline") {
										let _0x319850 = await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x12c)),
											_0x3bf8a6 = [...clients[_0x353bf0(0x18b)]()],
											_0x1b3f20 = 0x0;
										for (let _0x1aa0b3 of file) {
											if (!_0x3bf8a6[_0x353bf0(0x17b)](_0x1aa0b3[_0x353bf0(0x26e)])) {
												let _0x310811 = bc[_0x353bf0(0x267)] ? _0x353bf0(0x1e6) + (_0x1b3f20 + 0x1) : _0x1aa0b3["Username"];
												await launch(_0x1aa0b3, _0x2c453c[0x2]), _0x1b3f20++, await _0x319850[_0x353bf0(0x1fa)](_0x353bf0(0x206) + _0x310811 + _0x353bf0(0x17d) + _0x1b3f20 + "/" + (file["length"] - _0x3bf8a6[_0x353bf0(0x12a)]) + "]"), await new Promise((_0x3df206) => setTimeout(_0x3df206, bc["ld"] * 0x3e8));
											}
										}
										await _0x319850["edit"](_0x353bf0(0x127)), (launchdisplay = ![]);
									} else {
										let _0x25229c = parseInt(_0x2c453c[0x1]);
										if (!isNaN(_0x25229c) && _0x25229c > 0x0) {
											let _0x3fd4cd = await _0x1323e3["reply"](_0x353bf0(0x25c) + _0x25229c + "\x20accounts"),
												_0x5543aa = [...clients[_0x353bf0(0x18b)]()],
												_0x563ce9 = 0x0,
												_0x57c036 = 0x0;
											for (let _0x4329ea = 0x0; _0x4329ea < file[_0x353bf0(0x12a)] && _0x563ce9 < _0x25229c; ++_0x4329ea) {
												if (_0x5543aa["includes"](file[_0x4329ea][_0x353bf0(0x26e)])) continue;
												let _0x4552e8 = bc[_0x353bf0(0x267)] ? _0x353bf0(0x1e6) + (_0x57c036 + 0x1) : file[_0x4329ea][_0x353bf0(0x26e)];
												await launch(file[_0x4329ea], _0x2c453c[0x2]), await _0x3fd4cd[_0x353bf0(0x1fa)](_0x353bf0(0x206) + _0x4552e8 + _0x353bf0(0x17d) + (_0x563ce9 + 0x1) + _0x353bf0(0x13d) + _0x25229c + "]"), await new Promise((_0x46a2e5) => setTimeout(_0x46a2e5, bc["ld"] * 0x3e8)), _0x563ce9++, _0x57c036++;
											}
											await _0x3fd4cd[_0x353bf0(0x1fa)](_0x353bf0(0xf1) + _0x563ce9 + _0x353bf0(0x192)), (launchdisplay = ![]);
										} else {
											let _0x28a906 = file[_0x353bf0(0xfa)](function (_0x25776a) {
												const _0xc3e253 = _0x353bf0;
												return _0x25776a[_0xc3e253(0x26e)] == _0x2c453c[0x1];
											});
											if (_0x28a906["length"] == 0x0) return _0x1323e3["reply"]("user\x20not\x20found");
											let _0x4ec218 = await _0x1323e3["reply"](_0x353bf0(0x25c) + _0x2c453c[0x1]);
											await launch(_0x28a906[0x0], _0x2c453c[0x2]), await _0x4ec218[_0x353bf0(0x1fa)](_0x353bf0(0x1f5) + _0x2c453c[0x1] + _0x353bf0(0x1ec) + gDelMSG()), (launchdisplay = ![]);
										}
									}
								}
							} else {
								if (_0x2c453c[0x0] == _0x353bf0(0x1ba)) stop(), await _0x1323e3[_0x353bf0(0x196)]("Stopped\x20bots\x20launching!");
								else {
									if (_0x2c453c[0x0] == "remove") {
										let _0x5b47e3 = JSON[_0x353bf0(0x152)](fs[_0x353bf0(0x132)](_0x353bf0(0x157))) || [],
											[_0xbb149b, _0x5c26dd] = [_0x2c453c[0x1] ? (isNaN(_0x2c453c[0x1]) ? _0x2c453c[0x1]["split"](",")[_0x353bf0(0x177)]((_0x5a19a9) => file[_0x353bf0(0x247)]((_0xf30aba) => _0xf30aba[_0x353bf0(0x26e)] == _0x5a19a9)) : file["slice"](0x0, parseInt(_0x2c453c[0x1]))) : file, ""];
										if (_0x2c453c[0x1] === _0x353bf0(0x277)) _0x5b47e3[_0x353bf0(0x226)](...file), (file = []), (_0x5c26dd = _0x353bf0(0x14f));
										else {
											if (!_0xbb149b["length"]) _0x5c26dd = "No\x20user\x20specified";
											else
												for (let _0xe16785 of _0xbb149b) {
													if (!_0xe16785) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x208));
													(file = file[_0x353bf0(0xfa)]((_0x5635af) => _0x5635af !== _0xe16785)), _0x5b47e3[_0x353bf0(0x226)](_0xe16785), (_0x5c26dd += "\x0a" + _0xe16785[_0x353bf0(0x26e)] + "\x20was\x20removed");
												}
										}
										fs[_0x353bf0(0xf8)](_0x353bf0(0x157), JSON[_0x353bf0(0x265)](_0x5b47e3)), fs[_0x353bf0(0xf8)](_0x353bf0(0x14c), JSON[_0x353bf0(0x265)](file)), await _0x1323e3[_0x353bf0(0x196)](_0x5c26dd), await console[_0x353bf0(0x20a)](_0x5c26dd);
									} else {
										if (_0x2c453c[0x0] == _0x353bf0(0x18a)) {
											let _0x56c487 = JSON["parse"](fs[_0x353bf0(0x132)](_0x353bf0(0x157))) || [],
												[_0x48a8d3, _0x166055] = [_0x2c453c[0x1] ? (isNaN(_0x2c453c[0x1]) ? _0x2c453c[0x1][_0x353bf0(0x146)](",")[_0x353bf0(0x177)]((_0x551817) => _0x56c487["find"]((_0x2d2e4f) => _0x2d2e4f[_0x353bf0(0x26e)] == _0x551817)) : _0x56c487["slice"](0x0, parseInt(_0x2c453c[0x1]))) : _0x56c487, ""];
											if (_0x2c453c[0x1] === _0x353bf0(0x277)) file[_0x353bf0(0x226)](..._0x56c487), (_0x56c487 = []), (_0x166055 = "All\x20users\x20were\x20restored");
											else {
												if (!_0x48a8d3[_0x353bf0(0x12a)]) _0x166055 = _0x353bf0(0x20f);
												else
													for (let _0xb8466f of _0x48a8d3) {
														if (!_0xb8466f) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x208));
														(_0x56c487 = _0x56c487[_0x353bf0(0xfa)]((_0x360b8f) => _0x360b8f !== _0xb8466f)), file[_0x353bf0(0x226)](_0xb8466f), (_0x166055 += "\x0a" + _0xb8466f[_0x353bf0(0x26e)] + _0x353bf0(0x1af));
													}
											}
											fs[_0x353bf0(0xf8)](_0x353bf0(0x157), JSON["stringify"](_0x56c487)), fs["writeFileSync"](_0x353bf0(0x14c), JSON["stringify"](file)), await _0x1323e3[_0x353bf0(0x196)](_0x166055), await console[_0x353bf0(0x20a)](_0x166055);
										} else {
											if (_0x2c453c[0x0] == _0x353bf0(0x20c) || _0x2c453c[0x0] == _0x353bf0(0x1dd)) {
												let _0x4b4f13 = [];
												if (_0x2c453c[0x1] == _0x353bf0(0x1d6)) {
													let _0x450065 = JSON[_0x353bf0(0x152)](fs[_0x353bf0(0x132)](_0x353bf0(0x14c))) || [],
														[_0x2d4938, _0x909d7b] = [_0x2c453c[0x2] ? (isNaN(_0x2c453c[0x2]) ? _0x2c453c[0x2][_0x353bf0(0x146)](",")["map"]((_0x19870e) => _0x450065[_0x353bf0(0x247)]((_0x29c644) => _0x29c644["Username"] == _0x19870e)) : _0x450065[_0x353bf0(0x170)](0x0, parseInt(_0x2c453c[0x2]))) : [], ""];
													if (_0x2c453c[0x2] === _0x353bf0(0x277)) (_0x450065 = []), (_0x909d7b = "All\x20users\x20were\x20removed\x20from\x20accounts");
													else {
														if (!_0x2d4938["length"]) _0x909d7b = "No\x20user\x20specified";
														else
															for (let _0xf05e8 of _0x2d4938) {
																if (!_0xf05e8) return await _0x1323e3["reply"]("User\x20does\x20not\x20exist");
																(_0x450065 = _0x450065[_0x353bf0(0xfa)]((_0x513439) => _0x513439 !== _0xf05e8)), (_0x909d7b += "\x0a" + _0xf05e8[_0x353bf0(0x26e)] + _0x353bf0(0x26d));
															}
													}
													fs["writeFileSync"](_0x353bf0(0x14c), JSON[_0x353bf0(0x265)](_0x450065)), await _0x1323e3[_0x353bf0(0x196)](_0x909d7b), await console[_0x353bf0(0x20a)](_0x909d7b);
												} else {
													if (_0x2c453c[0x1] == "accountstore") {
														_0x4b4f13 = JSON["parse"](fs["readFileSync"](_0x353bf0(0x157))) || [];
														let [_0xd5ff34, _0xac24d8] = [_0x2c453c[0x2] ? (isNaN(_0x2c453c[0x2]) ? _0x2c453c[0x2]["split"](",")[_0x353bf0(0x177)]((_0x3e2ebb) => _0x4b4f13[_0x353bf0(0x247)]((_0x1204a1) => _0x1204a1[_0x353bf0(0x26e)] == _0x3e2ebb)) : _0x4b4f13[_0x353bf0(0x170)](0x0, parseInt(_0x2c453c[0x2]))) : [], ""];
														if (_0x2c453c[0x2] === _0x353bf0(0x277)) (_0x4b4f13 = []), (_0xac24d8 = _0x353bf0(0x198));
														else {
															if (!_0xd5ff34[_0x353bf0(0x12a)]) _0xac24d8 = _0x353bf0(0x20f);
															else
																for (let _0x23571b of _0xd5ff34) {
																	if (!_0x23571b) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x208));
																	(_0x4b4f13 = _0x4b4f13[_0x353bf0(0xfa)]((_0x234566) => _0x234566 !== _0x23571b)), (_0xac24d8 += "\x0a" + _0x23571b[_0x353bf0(0x26e)] + "\x20was\x20removed\x20from\x20accountstore");
																}
														}
														fs["writeFileSync"]("./botjs/accountstore.json", JSON[_0x353bf0(0x265)](_0x4b4f13)), await _0x1323e3["reply"](_0xac24d8), await console[_0x353bf0(0x20a)](_0xac24d8);
													} else await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1f6));
												}
											} else {
												if (_0x2c453c[0x0] == _0x353bf0(0x111) || _0x2c453c[0x0] == _0x353bf0(0x268)) {
													const { execSync: _0x7836be } = require(_0x353bf0(0x25d));
													if (_0x2c453c[0x1] && !isNaN(_0x2c453c[0x1])) {
														const _0x2b8046 = parseInt(_0x2c453c[0x1], 0xa);
														let _0x255b5c = _0x7836be(_0x353bf0(0x274), { windowsHide: !![] })
															[_0x353bf0(0x121)]()
															["split"]("\x0d\x0a")
															[_0x353bf0(0xfa)]((_0x3f49d1) => _0x3f49d1[_0x353bf0(0x19d)]() !== "")
															[_0x353bf0(0x177)]((_0xcaef49) => parseInt(_0xcaef49[_0x353bf0(0x146)](",")[0x1][_0x353bf0(0x21f)](/"/g, "")));
														_0x255b5c = _0x255b5c["slice"](0x1, _0x255b5c[_0x353bf0(0x12a)]);
														for (let _0x4fe604 = 0x0; _0x4fe604 < Math["min"](_0x2b8046, _0x255b5c[_0x353bf0(0x12a)]); _0x4fe604++) {
															_0x7836be(_0x353bf0(0x126) + _0x255b5c[_0x4fe604] + _0x353bf0(0x252), { windowsHide: !![] });
														}
														console[_0x353bf0(0x20a)](_0x353bf0(0x235) + Math[_0x353bf0(0x124)](_0x2b8046, _0x255b5c[_0x353bf0(0x12a)]) + _0x353bf0(0x1ef)), _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x235) + Math["min"](_0x2b8046, _0x255b5c[_0x353bf0(0x12a)]) + _0x353bf0(0x1ab));
													} else
														child["exec"]("taskkill\x20/im\x20RobloxPlayerBeta.exe\x20/f", { windowsHide: !![] }, (_0x1c4dd8, _0x39f582, _0x269eaa) => {
															const _0x181bc3 = _0x353bf0;
															if (_0x1c4dd8 && _0x1c4dd8[_0x181bc3(0x116)][_0x181bc3(0x17b)](_0x181bc3(0x238))) console[_0x181bc3(0x20a)]("No\x20instances\x20found\x20to\x20terminate!"), _0x1323e3[_0x181bc3(0x196)](_0x181bc3(0x23a));
															else {
																if (_0x1c4dd8) console[_0x181bc3(0x173)](_0x1c4dd8);
																else {
																	let _0x2bca6c = (_0x39f582[_0x181bc3(0x194)](/\n/g) || [])[_0x181bc3(0x12a)];
																	console[_0x181bc3(0x20a)](_0x2bca6c + "\x20instances\x20terminated!"), _0x1323e3[_0x181bc3(0x196)](_0x181bc3(0x235) + _0x2bca6c + _0x181bc3(0x211));
																}
															}
														});
												} else {
													if (_0x2c453c[0x0] == _0x353bf0(0x1d6) || _0x2c453c[0x0] == _0x353bf0(0x168) || _0x2c453c[0x0] == _0x353bf0(0x223)) {
														const _0x4bbe24 = [...clients[_0x353bf0(0x18b)]()],
															_0x39fe3e = _0x4bbe24["length"];
														file = JSON[_0x353bf0(0x152)](fs[_0x353bf0(0x132)]("./accounts.json"));
														if (!file[_0x353bf0(0x12a)]) {
															await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0xff));
															return;
														}
														const _0x526390 = file["length"];
														let _0x5a496f = "";
														try {
															let _0x135fb3 = 0x1;
															for (let _0x83cac4 of file) {
																let _0x545475 = bc[_0x353bf0(0x267)] ? _0x353bf0(0x1e6) + _0x135fb3 : _0x83cac4[_0x353bf0(0x26e)] || _0x353bf0(0x1e6) + _0x135fb3;
																(_0x5a496f += _0x4bbe24[_0x353bf0(0x17b)](_0x83cac4[_0x353bf0(0x26e)]) ? _0x353bf0(0x276) + _0x545475 + "\x0a" : _0x353bf0(0x1b2) + _0x545475 + "\x0a"), _0x135fb3++;
															}
														} catch (_0x93e8da) {
															console[_0x353bf0(0x173)]("Exceded\x20character\x20limit!"), _0x1323e3[_0x353bf0(0x196)]("Exceded\x20character\x20limit!");
														}
														await _0x1323e3[_0x353bf0(0x196)]("\x0a" + _0x39fe3e + "/" + _0x526390 + _0x353bf0(0x200) + _0x5a496f + _0x353bf0(0x10d) + gDelMSG(), { timeout: deletemessage ? 0xe678 : undefined });
													} else {
														if (_0x2c453c[0x0] == _0x353bf0(0x110) || _0x2c453c[0x0] == "pcStats") {
															const _0x5a0322 = JSON[_0x353bf0(0x152)](fs[_0x353bf0(0x132)](_0x353bf0(0x19a))),
																_0x1b0cff = _0x5a0322[_0x353bf0(0x23e)],
																_0x2d4fe0 = _0x5a0322[_0x353bf0(0x25b)],
																_0x746272 = Date["now"]() - start,
																_0x5c6475 = Math[_0x353bf0(0x23d)](_0x746272 / 0x3e8),
																_0x4ee5e1 = Math[_0x353bf0(0x23d)](_0x5c6475 / 0x3c),
																_0x63655c = Math[_0x353bf0(0x23d)](_0x4ee5e1 / 0x3c),
																_0x322c96 = Math[_0x353bf0(0x23d)](_0x63655c / 0x18),
																_0x49cc3e = _0x322c96["toString"]()["padStart"](0x2, "0") + ":" + (_0x63655c % 0x18)[_0x353bf0(0x121)]()["padStart"](0x2, "0") + ":" + (_0x4ee5e1 % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x5c6475 % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0"),
																_0x4d13b8 = _0x2d4fe0 - _0x1b0cff,
																_0x5302a7 = Math["round"](_0x4d13b8 / (_0x746272 / (0x3e8 * 0x3c * 0x3c))),
																_0x3d3ab0 = require("systeminformation"),
																_0x40ed07 = await getCPULoadAVG(0x3e8, 0x64),
																_0x58df97 = await _0x3d3ab0["cpuTemperature"](),
																_0x134f56 = _0x58df97["main"];
															await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x190) + _0x40ed07 + _0x353bf0(0x164) + _0x134f56 + _0x353bf0(0x12b) + ((os[_0x353bf0(0x210)]() - os[_0x353bf0(0x1bd)]()) / 0x400 / 0x400 / 0x400)[_0x353bf0(0x1c5)](0x2) + _0x353bf0(0x1fb) + _0x49cc3e + _0x353bf0(0x14d) + _0x4d13b8 + _0x353bf0(0xef) + _0x5302a7 + _0x353bf0(0x10d) + gDelMSG())[_0x353bf0(0x24e)]((_0x115310) => deletemessage && setTimeout(() => _0x115310["delete"](), 0xe678));
														} else {
															if (commands["indexOf"](_0x2c453c[0x0]) > -0x1) {
																if (_0x2c453c[0x0] == "ra") _0x2c453c[0x0] = _0x353bf0(0x19b);
																if (_0x2c453c[0x0] == _0x353bf0(0x1e3)) _0x2c453c[0x0] = _0x353bf0(0x21c);
																let _0x47de3c = await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x15e) + _0x2c453c[0x0] + "\x20" + _0x2c453c[0x1] + "``...\x0aStarted\x20<t:" + Math[_0x353bf0(0x23d)](Date["now"]() / 0x3e8) + _0x353bf0(0x145)),
																	_0x598ff2;
																if ([_0x353bf0(0x19b), "ra", _0x353bf0(0x21c), _0x353bf0(0x1e3)][_0x353bf0(0x17b)](_0x2c453c[0x0])) _0x598ff2 = "node\x20./botjs/jsfiles/" + _0x2c453c[0x0] + ".js\x20" + _0x2c453c[0x1] + "\x20" + _0x2c453c[0x2];
																else _0x598ff2 = _0x2c453c[0x1] && _0x2c453c[0x1][_0x353bf0(0x253)]() == _0x353bf0(0x277) ? "node\x20./js/all.js\x20" + _0x2c453c[0x0] + "\x20" + _0x2c453c[0x2] : _0x353bf0(0x279) + _0x2c453c[0x0] + _0x353bf0(0x239) + _0x2c453c[0x1] + "\x20" + _0x2c453c[0x2];
																exec(_0x598ff2, { windowsHide: !![] }, async function (_0x251b40, _0x2eb865) {
																	const _0x371847 = _0x353bf0;
																	let _0x5dfc3b = !0x1;
																	if (_0x251b40 && _0x251b40[_0x371847(0x12a)] > 0x7a7) console[_0x371847(0x20a)](_0x251b40), (_0x251b40 = _0x251b40["substring"](0x0, 0x7a6)), (_0x5dfc3b = !0x0);
																	else _0x2eb865 && _0x2eb865[_0x371847(0x12a)] > 0x7a7 && (console[_0x371847(0x20a)](_0x2eb865), (_0x2eb865 = _0x2eb865[_0x371847(0x269)](0x0, 0x7a6)), (_0x5dfc3b = !0x0));
																	await _0x1323e3[_0x371847(0x196)](_0x371847(0x1a4) + (_0x2eb865 || _0x251b40) + _0x371847(0x10d) + gDelMSG())[_0x371847(0x24e)]((_0x15f08a) => {
																		const _0x1da8fa = _0x371847;
																		deletemessage === !0x0 && setTimeout(() => _0x15f08a[_0x1da8fa(0x172)](), 0xe678);
																	}),
																		_0x5dfc3b == !0x0 && (await _0x1323e3[_0x371847(0x196)]("**MESSAGE\x20TOO\x20LONG,\x20LOGGED\x20TO\x20CONSOLE**")),
																		_0x47de3c[_0x371847(0x172)]();
																});
															} else {
																if (_0x2c453c[0x0] === _0x353bf0(0x105)) {
																	const { chromium: _0x8b2ca2 } = require("playwright-extra"),
																		_0x2b5e36 = require(_0x353bf0(0x17e))();
																	_0x8b2ca2["use"](_0x2b5e36);
																	const _0xd8961d = require(_0x353bf0(0x101))[_0x353bf0(0x23c)](__dirname, _0x353bf0(0x162));
																	async function _0x5dcdda() {
																		const _0x4cd9b6 = _0x353bf0;
																		let _0x73d416 = await _0x8b2ca2["launchPersistentContext"]("", { headless: ![], viewport: { width: 0x3e8, height: 0x3e8 }, args: [_0x4cd9b6(0x1c4) + _0xd8961d, "--load-extensions=." + _0xd8961d] }),
																			_0x57275a = await _0x73d416["newPage"]();
																		await _0x57275a[_0x4cd9b6(0x1d3)](_0x4cd9b6(0x1e5), { waitUntil: _0x4cd9b6(0x12e) }), await _0x57275a[_0x4cd9b6(0x230)](0x7d0);
																		let _0x19eaa0 = await _0x73d416[_0x4cd9b6(0x1d8)]();
																		await _0x19eaa0["goto"](_0x4cd9b6(0x129), { waitUntil: _0x4cd9b6(0x12e) }), await _0x19eaa0["waitForTimeout"](0xfa0), await _0x19eaa0[_0x4cd9b6(0x1d5)](), await _0x57275a["waitForNavigation"]("[class=\x22swal2-deny\x20swal2-styled\x22]", { timeout: 0x186a0 }), await _0x57275a["waitForTimeout"](0x3e8), await _0x57275a[_0x4cd9b6(0x1d2)](_0x4cd9b6(0x139))[_0x4cd9b6(0x204)](), await _0x57275a[_0x4cd9b6(0x204)](_0x4cd9b6(0x1c3)), await _0x57275a["click"](_0x4cd9b6(0x1fc));
																		let _0x5049f6 = await _0x73d416["newPage"]();
																		await _0x5049f6[_0x4cd9b6(0x1d3)](_0x4cd9b6(0x20b), { waitUntil: _0x4cd9b6(0x12e) }), await _0x5049f6[_0x4cd9b6(0x230)](0xfa0), await _0x5049f6[_0x4cd9b6(0x1d5)](), await _0x57275a[_0x4cd9b6(0x100)](_0x4cd9b6(0x1e9), { timeout: 0x186a0 }), await _0x57275a["waitForTimeout"](0x7d0), await _0x57275a[_0x4cd9b6(0x1d3)](_0x4cd9b6(0x1ff));
																		let _0xe64a61 = require("../accounts.json");
																		for (let _0x125ab of _0xe64a61) {
																			let _0x193691 = _0x125ab[_0x4cd9b6(0x1b5)];
																			await _0x57275a["click"](_0x4cd9b6(0x169)), await _0x57275a[_0x4cd9b6(0x230)](0x1f4), await _0x57275a[_0x4cd9b6(0x1d2)](_0x4cd9b6(0x25f))[_0x4cd9b6(0x156)](_0x193691), await _0x57275a[_0x4cd9b6(0x230)](0x1f4), await _0x57275a[_0x4cd9b6(0x204)](_0x4cd9b6(0x224)), await _0x57275a[_0x4cd9b6(0x230)](0x2710), await _0x57275a[_0x4cd9b6(0x204)](_0x4cd9b6(0x224)), await _0x57275a[_0x4cd9b6(0x230)](0x3e8);
																		}
																	}
																	_0x5dcdda();
																} else {
																	if (_0x2c453c[0x0] == "cookies") {
																		const _0x561fbe = new Date(),
																			_0x3173a1 = _0x561fbe[_0x353bf0(0x231)](),
																			_0x4ab004 = _0x1323e3[_0x353bf0(0x212)],
																			_0x116f51 = "https://discord.com/channels/" + _0x4ab004[_0x353bf0(0x21a)]["id"] + "/" + _0x4ab004["id"],
																			_0x30e246 = await _0x1323e3[_0x353bf0(0x1b6)][_0x353bf0(0x125)][_0x353bf0(0x143)](config[_0x353bf0(0x1a0)]);
																		_0x30e246[_0x353bf0(0x1d7)](_0x353bf0(0xf6) + _0x3173a1),
																			fs[_0x353bf0(0x217)]("./accounts.json", (_0x3c2a86, _0x1153cc) => {
																				const _0x30797 = _0x353bf0;
																				if (_0x3c2a86) {
																					console[_0x30797(0x173)](_0x3c2a86);
																					return;
																				}
																				const _0x8d79dd = JSON[_0x30797(0x152)](_0x1153cc);
																				let _0x45892d = "";
																				_0x8d79dd[_0x30797(0x1f1)]((_0x359acd) => {
																					_0x45892d += _0x359acd["Cookie"] + "\x0a";
																				});
																				const _0x7046a = new MessageAttachment(Buffer[_0x30797(0x134)](_0x45892d), _0x30797(0x199));
																				_0x30e246[_0x30797(0x1d7)](_0x7046a);
																			}),
																			fs[_0x353bf0(0x217)](_0x353bf0(0x157), (_0x570cf8, _0x528f91) => {
																				const _0x4e8c30 = _0x353bf0;
																				if (_0x570cf8) {
																					console[_0x4e8c30(0x173)](_0x570cf8);
																					return;
																				}
																				const _0x5565ec = JSON[_0x4e8c30(0x152)](_0x528f91);
																				let _0x1efadf = "";
																				_0x5565ec[_0x4e8c30(0x1f1)]((_0x734b0f) => {
																					_0x1efadf += _0x734b0f["Cookie"] + "\x0a";
																				});
																				const _0x581321 = new MessageAttachment(Buffer[_0x4e8c30(0x134)](_0x1efadf), _0x4e8c30(0x261));
																				_0x30e246["send"](_0x581321)
																					["then"](() => {
																						const _0x163d77 = _0x4e8c30;
																						_0x30e246[_0x163d77(0x1d7)](_0x163d77(0x237) + _0x116f51 + _0x163d77(0x122));
																					})
																					[_0x4e8c30(0x1ca)]((_0x2406d7) => {
																						const _0x5ad9e8 = _0x4e8c30;
																						console[_0x5ad9e8(0x173)](_0x2406d7);
																					});
																			}),
																			_0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1e8));
																	} else {
																		if (_0x2c453c[0x0] === "uconfig") {
																			const _0x23bad0 = new Date(),
																				_0x46b2b8 = _0x23bad0["toLocaleString"](),
																				_0x4a78cb = _0x1323e3[_0x353bf0(0x212)],
																				_0x539e9b = _0x353bf0(0x14a) + _0x4a78cb[_0x353bf0(0x21a)]["id"] + "/" + _0x4a78cb["id"],
																				_0x28fc36 = await _0x1323e3[_0x353bf0(0x1b6)][_0x353bf0(0x125)][_0x353bf0(0x143)](config[_0x353bf0(0x1a0)]);
																			_0x28fc36[_0x353bf0(0x1d7)](_0x353bf0(0xf6) + _0x46b2b8),
																				fs["readFile"](_0x353bf0(0x1c7), (_0x5a1f79, _0x5b48e3) => {
																					const _0xa01578 = _0x353bf0;
																					if (_0x5a1f79) {
																						console[_0xa01578(0x173)](_0x5a1f79);
																						return;
																					}
																					const _0x104398 = JSON["parse"](_0x5b48e3);
																					(_0x104398[_0xa01578(0x11d)] = ""), (_0x104398["botOwnerID"] = ""), (_0x104398["mainAccount"] = "");
																					const _0x3a1ea0 = JSON[_0xa01578(0x265)](_0x104398, null, 0x2),
																						_0x5cafb0 = new MessageAttachment(Buffer[_0xa01578(0x134)](_0x3a1ea0), _0xa01578(0x180));
																					_0x28fc36[_0xa01578(0x1d7)](_0x5cafb0);
																				}),
																				_0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1e8));
																		} else {
																			if (_0x2c453c[0x0] == _0x353bf0(0x184) || _0x2c453c[0x0] == "dis") {
																				if (!_0x2c453c[0x1]) return await _0x1323e3["reply"](_0x353bf0(0x108));
																				let _0x464efb = [];
																				if (_0x2c453c[0x1] == _0x353bf0(0x277)) _0x464efb = file;
																				else {
																					const _0x39a9ba = file[_0x353bf0(0xfa)](function (_0x50fade) {
																						return _0x50fade["Username"] == _0x2c453c[0x1];
																					})[0x0];
																					if (!_0x39a9ba) return await _0x1323e3["reply"](_0x353bf0(0x24a));
																					_0x464efb[_0x353bf0(0x226)](_0x39a9ba);
																				}
																				(process[_0x353bf0(0x123)][_0x353bf0(0x202)] = 0x0), (process["env"][_0x353bf0(0x1c8)] = 0x1);
																				async function _0x109652(_0x409598) {
																					const _0x26c73b = _0x353bf0;
																					let _0x34fb8a = "";
																					const _0x5e08f7 = async (_0x4fa24b, _0x38f7ce, _0x23227c) => {
																							const _0x28fd93 = _0x3b5d,
																								_0x33ae21 = await fetch(_0x38f7ce, { headers: { Cookie: _0x28fd93(0x1d0) + _0x409598 + ";", "x-csrf-token": _0x34fb8a, "Content-Length": _0x23227c?.[_0x28fd93(0x12a)]["toString"]() || "0" }, method: _0x28fd93(0x191), body: _0x23227c || "" });
																							if (_0x33ae21[_0x28fd93(0x16a)] == 0x193) {
																								if (_0x33ae21["headers"][_0x28fd93(0x1df)]("x-csrf-token")) return (_0x34fb8a = _0x33ae21[_0x28fd93(0x17c)][_0x28fd93(0x119)](_0x28fd93(0x166))), _0x5e08f7(_0x4fa24b, _0x38f7ce, _0x23227c);
																							}
																							return _0x33ae21;
																						},
																						_0x3a0553 = await _0x5e08f7("POST", _0x26c73b(0x1ae));
																					return _0x34fb8a;
																				}
																				for (const _0x3ec8f0 of _0x464efb) {
																					await fetch(_0x353bf0(0x213) + _0x3ec8f0["UserID"] + _0x353bf0(0x137), { method: _0x353bf0(0x1f3), body: JSON[_0x353bf0(0x265)]({ newDisplayName: _0x2c453c[0x2] }), headers: { "Content-type": _0x353bf0(0x174), Cookie: _0x353bf0(0x1d0) + _0x3ec8f0[_0x353bf0(0x1b5)], "x-csrf-token": await _0x109652(_0x3ec8f0[_0x353bf0(0x1b5)]) } }), await _0x1323e3[_0x353bf0(0x196)](_0x3ec8f0["Username"] + "\x20Displayname\x20changed\x20to\x20" + _0x2c453c[0x2]), await console[_0x353bf0(0x20a)](_0x3ec8f0[_0x353bf0(0x26e)] + _0x353bf0(0x112) + _0x2c453c[0x2]);
																				}
																			} else {
																				if (_0x2c453c[0x0] == _0x353bf0(0x203) || _0x2c453c[0x0] == "sc")
																					screenshot({ format: _0x353bf0(0x258) })
																						[_0x353bf0(0x24e)]((_0x415bfd) => _0x1323e3[_0x353bf0(0x212)][_0x353bf0(0x1d7)](new MessageAttachment(_0x415bfd, "screenshot.png")))
																						[_0x353bf0(0x1ca)](console[_0x353bf0(0x20a)]);
																				else {
																					if (_0x2c453c[0x0] == _0x353bf0(0x1b9) || _0x2c453c[0x0] == _0x353bf0(0x236)) {
																						if (process[_0x353bf0(0x123)][_0x353bf0(0x273)]) {
																							const _0x6f77e2 = JSON[_0x353bf0(0x152)](fs[_0x353bf0(0x132)](_0x353bf0(0x19a))),
																								_0x2ba07d = _0x6f77e2[_0x353bf0(0x23e)],
																								_0xb75425 = _0x6f77e2["TotalRBX"],
																								_0x433918 = Date[_0x353bf0(0x25a)]() - start,
																								_0x1770a5 = Math[_0x353bf0(0x23d)](_0x433918 / 0x3e8),
																								_0x11aaaf = Math[_0x353bf0(0x23d)](_0x1770a5 / 0x3c),
																								_0x50fb0e = Math["floor"](_0x11aaaf / 0x3c),
																								_0x1d4501 = Math[_0x353bf0(0x23d)](_0x50fb0e / 0x18),
																								_0x2dcefc = _0x1d4501[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x50fb0e % 0x18)["toString"]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x11aaaf % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x1770a5 % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0"),
																								_0x1597b7 = _0xb75425 - _0x2ba07d,
																								_0x4d092c = Math[_0x353bf0(0x1ad)](_0x1597b7 / (_0x433918 / (0x3e8 * 0x3c * 0x3c)));
																							await _0x1323e3["reply"](_0x353bf0(0x178) + _0x2dcefc + _0x353bf0(0x14d) + _0x1597b7 + "\x0aAverage\x20per\x20hour:\x20" + _0x4d092c + _0x353bf0(0x10d)), console[_0x353bf0(0x20a)](_0x353bf0(0x22a) + _0x2dcefc + _0x353bf0(0x14d) + _0x1597b7 + _0x353bf0(0xef) + _0x4d092c), setTimeout(() => require(_0x353bf0(0x25d))["execSync"](_0x353bf0(0x249)), 0x3e8);
																						} else {
																							const _0x2fa3a6 = JSON["parse"](fs[_0x353bf0(0x132)](_0x353bf0(0x19a))),
																								_0x8e99c9 = _0x2fa3a6[_0x353bf0(0x23e)],
																								_0x46fbff = _0x2fa3a6[_0x353bf0(0x25b)],
																								_0x1c0871 = Date[_0x353bf0(0x25a)]() - start,
																								_0x4f733b = Math[_0x353bf0(0x23d)](_0x1c0871 / 0x3e8),
																								_0x3ce51e = Math[_0x353bf0(0x23d)](_0x4f733b / 0x3c),
																								_0x4793d9 = Math[_0x353bf0(0x23d)](_0x3ce51e / 0x3c),
																								_0x2c1523 = Math["floor"](_0x4793d9 / 0x18),
																								_0x560f20 = _0x2c1523[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x4793d9 % 0x18)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x3ce51e % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x4f733b % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0"),
																								_0x48ddba = _0x46fbff - _0x8e99c9,
																								_0x774999 = Math[_0x353bf0(0x1ad)](_0x48ddba / (_0x1c0871 / (0x3e8 * 0x3c * 0x3c)));
																							await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x214) + _0x560f20 + _0x353bf0(0x14d) + _0x48ddba + "\x0aAverage\x20per\x20hour:\x20" + _0x774999 + _0x353bf0(0x10d)), console[_0x353bf0(0x20a)]("Not\x20using\x20PM2\x20launcher,\x20Stopped\x20bot\x20instead!\x0aUptime:\x20" + _0x560f20 + _0x353bf0(0x14d) + _0x48ddba + _0x353bf0(0xef) + _0x774999), setTimeout(() => process[_0x353bf0(0x1b3)](0x0), 0x3e8);
																						}
																					} else {
																						if (_0x2c453c[0x0] == _0x353bf0(0x245) || _0x2c453c[0x0] == "offb") {
																							const _0x7c7c58 = JSON[_0x353bf0(0x152)](fs["readFileSync"]("./botjs/BotjsConfig.json")),
																								_0x2c3c3e = _0x7c7c58[_0x353bf0(0x23e)],
																								_0x4c31ea = _0x7c7c58[_0x353bf0(0x25b)],
																								_0x433b0c = Date[_0x353bf0(0x25a)]() - start,
																								_0x2a0bab = Math[_0x353bf0(0x23d)](_0x433b0c / 0x3e8),
																								_0x925d6f = Math[_0x353bf0(0x23d)](_0x2a0bab / 0x3c),
																								_0x1621bc = Math[_0x353bf0(0x23d)](_0x925d6f / 0x3c),
																								_0xc3c4b2 = Math[_0x353bf0(0x23d)](_0x1621bc / 0x18),
																								_0x1ed6ae = _0xc3c4b2[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x1621bc % 0x18)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x925d6f % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0") + ":" + (_0x2a0bab % 0x3c)[_0x353bf0(0x121)]()[_0x353bf0(0x103)](0x2, "0"),
																								_0xfe3f20 = _0x4c31ea - _0x2c3c3e,
																								_0x1eef94 = Math["round"](_0xfe3f20 / (_0x433b0c / (0x3e8 * 0x3c * 0x3c)));
																							await _0x1323e3[_0x353bf0(0x196)]("Shutting\x20down\x20bot!\x0a```Uptime:\x20" + _0x1ed6ae + _0x353bf0(0x14d) + _0xfe3f20 + _0x353bf0(0xef) + _0x1eef94 + _0x353bf0(0x10d)), console["log"](_0x353bf0(0x1e0) + _0x1ed6ae + _0x353bf0(0x14d) + _0xfe3f20 + _0x353bf0(0xef) + _0x1eef94), process["env"][_0x353bf0(0x273)] ? require("child_process")[_0x353bf0(0x1a6)]("npx\x20pm2\x20delete\x20./js/bot.js") : process["exit"](0x0);
																						} else {
																							if (_0x2c453c[0x0] == _0x353bf0(0x222) || _0x2c453c[0x0] == _0x353bf0(0x1a7)) await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x26b)), console["log"](_0x353bf0(0x26b)), require("child_process")["exec"]("shutdown\x20/p");
																							else {
																								if (_0x2c453c[0x0] == _0x353bf0(0x18e) || _0x2c453c[0x0] == "re") await _0x1323e3["reply"]("Restarting\x20PC!"), console["log"](_0x353bf0(0x207)), require(_0x353bf0(0x25d))[_0x353bf0(0x1a6)]("shutdown\x20-t\x200\x20-r\x20-f");
																								else {
																									if (_0x2c453c[0x0] === "prefix" || _0x2c453c[0x0] === "pre") {
																										if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																										_0x2c453c[0x1] === "true" || _0x2c453c[0x1] === _0x353bf0(0xf7) ? (bc[_0x353bf0(0x106)] = _0x2c453c[0x1] === _0x353bf0(0x227)) : ((bc[_0x353bf0(0x106)] = _0x2c453c[0x1][_0x353bf0(0x121)]()), (prefix = bc["preval"])), fs["writeFileSync"](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1b4) + bc[_0x353bf0(0x106)]);
																									} else {
																										if (_0x2c453c[0x0] === _0x353bf0(0x21e) || _0x2c453c[0x0] === _0x353bf0(0x175)) {
																											if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																											_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7) ? (bc[_0x353bf0(0x1c6)] = _0x2c453c[0x1] === _0x353bf0(0x227)) : (bc[_0x353bf0(0x1c6)] = _0x2c453c[0x1][_0x353bf0(0x121)]()), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON["stringify"](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x24b) + bc["Nopecha"]);
																										} else {
																											if (_0x2c453c[0x0] === _0x353bf0(0x1e4) || _0x2c453c[0x0] === "sl") {
																												if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																												if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc[_0x353bf0(0x16b)] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x195) + bc[_0x353bf0(0x16b)]);
																												else return await _0x1323e3["reply"]("invalid\x20value\x20specified");
																											} else {
																												if (_0x2c453c[0x0] == _0x353bf0(0x155) || _0x2c453c[0x0] == "ab") {
																													if (!_0x2c453c[0x1]) return await _0x1323e3["reply"](_0x353bf0(0x254));
																													if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc[_0x353bf0(0x19e)] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3["reply"](_0x353bf0(0x1c0) + bc[_0x353bf0(0x19e)]);
																													else return await _0x1323e3["reply"](_0x353bf0(0x264));
																												} else {
																													if (_0x2c453c[0x0] == _0x353bf0(0x148) || _0x2c453c[0x0] == "ag") {
																														if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)]("no\x20value\x20specified");
																														if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc["agval"] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs["writeFileSync"]("./botjs/BotjsConfig.json", JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x179) + bc[_0x353bf0(0x221)]);
																														else return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x264));
																													} else {
																														if (_0x2c453c[0x0] === _0x353bf0(0x118) || _0x2c453c[0x0] === _0x353bf0(0x1a2)) {
																															if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																															if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc["arl"] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0xfc) + bc[_0x353bf0(0x1a2)]);
																															else return await _0x1323e3["reply"](_0x353bf0(0x264));
																														} else {
																															if (_0x2c453c[0x0] === "anonymous" || _0x2c453c[0x0] === "anon") {
																																if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc["anon"] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs["writeFileSync"](_0x353bf0(0x19a), JSON["stringify"](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x225) + bc["anon"]);
																																else return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x264));
																															} else {
																																if (_0x2c453c[0x0] == _0x353bf0(0x23f) || _0x2c453c[0x0] == "ar") {
																																	if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																	if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc["ar"] = _0x2c453c[0x1] === "true"), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON["stringify"](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x260) + bc["ar"]);
																																	else return await _0x1323e3[_0x353bf0(0x196)]("invalid\x20value\x20specified");
																																} else {
																																	if (_0x2c453c[0x0] == _0x353bf0(0x1f4) || _0x2c453c[0x0] == _0x353bf0(0x1cf)) {
																																		if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																		const _0x1f6145 = parseInt(_0x2c453c[0x1]);
																																		(bc["ald"] = isNaN(_0x1f6145) ? bc[_0x353bf0(0x1cf)] : _0x1f6145), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1a3) + bc[_0x353bf0(0x1cf)]);
																																	} else {
																																		if (_0x2c453c[0x0] == _0x353bf0(0x13c) || _0x2c453c[0x0] == "ld") {
																																			if (!_0x2c453c[0x1]) return await _0x1323e3["reply"](_0x353bf0(0x254));
																																			const _0x461089 = parseInt(_0x2c453c[0x1]);
																																			(bc["ld"] = isNaN(_0x461089) ? bc["ld"] : _0x461089), fs[_0x353bf0(0xf8)]("./botjs/BotjsConfig.json", JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x22d) + bc["ld"]);
																																		} else {
																																			if (_0x2c453c[0x0] == "autominimize" || _0x2c453c[0x0] == _0x353bf0(0x1ee)) {
																																				if (!_0x2c453c[0x1]) return await _0x1323e3["reply"](_0x353bf0(0x254));
																																				if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === "false") (bc[_0x353bf0(0x149)] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)]("./botjs/BotjsConfig.json", JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)]("autominimize\x20set\x20to\x20" + bc[_0x353bf0(0x149)]);
																																				else return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x264));
																																			} else {
																																				if (_0x2c453c[0x0] == "autominimizedelay" || _0x2c453c[0x0] == _0x353bf0(0x255)) {
																																					if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																					const _0x2fce0b = parseInt(_0x2c453c[0x1]);
																																					(bc["amdel"] = isNaN(_0x2fce0b) ? bc["amdel"] : _0x2fce0b), fs["writeFileSync"]("./botjs/BotjsConfig.json", JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1db) + bc[_0x353bf0(0x255)]);
																																				} else {
																																					if (_0x2c453c[0x0] === _0x353bf0(0x229) || _0x2c453c[0x0] === _0x353bf0(0xf5)) {
																																						if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)]("no\x20value\x20specified");
																																						_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7) ? (bc[_0x353bf0(0xf5)] = _0x2c453c[0x1] === _0x353bf0(0x227)) : (bc[_0x353bf0(0xf5)] = _0x2c453c[0x1][_0x353bf0(0x121)]()), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)]("placeid\x20set\x20to\x20" + bc[_0x353bf0(0xf5)]);
																																					} else {
																																						if (_0x2c453c[0x0] === _0x353bf0(0x151) || _0x2c453c[0x0] === "ma") {
																																							if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																							_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === "false" ? (c[_0x353bf0(0xfe)] = _0x2c453c[0x1] === _0x353bf0(0x227)) : (c[_0x353bf0(0xfe)] = _0x2c453c[0x1]["toString"]()), fs[_0x353bf0(0xf8)](_0x353bf0(0x1c7), JSON[_0x353bf0(0x265)](c)), await _0x1323e3["reply"](_0x353bf0(0x147) + c["mainAccount"]);
																																						} else {
																																							if (_0x2c453c[0x0] == _0x353bf0(0x138)) {
																																								if (!_0x2c453c[0x1]) return await _0x1323e3["reply"](_0x353bf0(0x254));
																																								if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === "false") (c[_0x353bf0(0x154)] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)]("./config.json", JSON[_0x353bf0(0x265)](c)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1c2) + c[_0x353bf0(0x154)]);
																																								else return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x264));
																																							} else {
																																								if (_0x2c453c[0x0] == _0x353bf0(0x1bc) || _0x2c453c[0x0] == _0x353bf0(0x250)) {
																																									if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)]("no\x20value\x20specified");
																																									if (_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7)) (c[_0x353bf0(0x197)] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)](_0x353bf0(0x1c7), JSON[_0x353bf0(0x265)](c)), await _0x1323e3[_0x353bf0(0x196)]("ramautoimport\x20set\x20to\x20" + c["ramAutoImport"]);
																																									else return await _0x1323e3["reply"](_0x353bf0(0x264));
																																								} else {
																																									if (_0x2c453c[0x0] == _0x353bf0(0x23b)) {
																																										if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x141));
																																										if (_0x2c453c[0x1] === _0x353bf0(0x223)) bc["rbxstatus"] = 0x0;
																																										else {
																																											if (_0x2c453c[0x1] === "accs") bc[_0x353bf0(0x18c)] = 0x1;
																																											else {
																																												if (_0x2c453c[0x1] === _0x353bf0(0x277)) bc[_0x353bf0(0x18c)] = 0x2;
																																												else return await _0x1323e3[_0x353bf0(0x196)]("Invalid\x20store,\x20specify\x20either\x20\x22acc\x22\x20or\x20\x22accs\x22\x20or\x20\x22all\x22");
																																											}
																																										}
																																										fs[_0x353bf0(0xf8)]("./botjs/BotjsConfig.json", JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x1a5) + _0x2c453c[0x1]);
																																									} else {
																																										if (_0x2c453c[0x0] == _0x353bf0(0x107)) {
																																											if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																											if (_0x2c453c[0x1] === "true" || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc[_0x353bf0(0x107)] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3["reply"]("hourlystatus\x20set\x20to\x20" + bc["hourlystatus"]);
																																											else return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x264));
																																										} else {
																																											if (_0x2c453c[0x0] === _0x353bf0(0x1fd)) {
																																												if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x254));
																																												_0x2c453c[0x1] === "true" || _0x2c453c[0x1] === _0x353bf0(0xf7) ? (bc[_0x353bf0(0x1e2)] = _0x2c453c[0x1] === "true") : (bc["hourlychannelid"] = _0x2c453c[0x1][_0x353bf0(0x121)]()), fs[_0x353bf0(0xf8)](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x11f) + bc[_0x353bf0(0x1e2)]);
																																											} else {
																																												if (_0x2c453c[0x0] == _0x353bf0(0x18d)) {
																																													if (!_0x2c453c[0x1]) return await _0x1323e3[_0x353bf0(0x196)]("no\x20value\x20specified");
																																													if (_0x2c453c[0x1] === "true" || _0x2c453c[0x1] === _0x353bf0(0xf7)) (bc["accountstatus"] = _0x2c453c[0x1] === _0x353bf0(0x227)), fs["writeFileSync"](_0x353bf0(0x19a), JSON["stringify"](bc)), await _0x1323e3[_0x353bf0(0x196)]("accountstatus\x20set\x20to\x20" + bc[_0x353bf0(0x18d)]);
																																													else return await _0x1323e3["reply"](_0x353bf0(0x264));
																																												} else {
																																													if (_0x2c453c[0x0] === _0x353bf0(0x1b7)) {
																																														if (!_0x2c453c[0x1]) return await _0x1323e3["reply"]("no\x20value\x20specified");
																																														_0x2c453c[0x1] === _0x353bf0(0x227) || _0x2c453c[0x1] === _0x353bf0(0xf7) ? (bc[_0x353bf0(0x1b1)] = _0x2c453c[0x1] === _0x353bf0(0x227)) : (bc["accountstatuschannelid"] = _0x2c453c[0x1][_0x353bf0(0x121)]()), fs["writeFileSync"](_0x353bf0(0x19a), JSON[_0x353bf0(0x265)](bc)), await _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x262) + bc[_0x353bf0(0x1b1)]);
																																													} else {
																																														if (_0x2c453c[0x0] == _0x353bf0(0x16f)) {
																																															const _0x1aa56e = { nsfw: _0x353bf0(0x1bb), sfw: _0x353bf0(0x193) };
																																															if (!_0x2c453c[0x1] || (_0x2c453c[0x1] != _0x353bf0(0x1aa) && _0x2c453c[0x1] != _0x353bf0(0xfb))) return _0x1323e3[_0x353bf0(0x196)]("Specify\x20nsfw\x20or\x20sfw");
																																															fetch(_0x1aa56e[_0x2c453c[0x1]])
																																																[_0x353bf0(0x24e)]((_0x399e6d) => _0x399e6d["json"]())
																																																[_0x353bf0(0x24e)]((_0x431e51) => _0x1323e3[_0x353bf0(0x212)][_0x353bf0(0x1d7)](_0x2c453c[0x1] === _0x353bf0(0x1aa) ? "||" + _0x431e51[_0x353bf0(0x15b)]["children"][Math[_0x353bf0(0x23d)](Math[_0x353bf0(0x24f)]() * _0x431e51["data"][_0x353bf0(0xf9)][_0x353bf0(0x12a)])][_0x353bf0(0x15b)]["url"] + "||" : _0x431e51["data"][_0x353bf0(0xf9)][Math["floor"](Math[_0x353bf0(0x24f)]() * _0x431e51[_0x353bf0(0x15b)][_0x353bf0(0xf9)][_0x353bf0(0x12a)])]["data"][_0x353bf0(0x1b8)]))
																																																["catch"](console[_0x353bf0(0x173)]),
																																																fetch(_0x353bf0(0x189), { method: _0x353bf0(0x191), body: JSON["stringify"]({ user: _0x1323e3["author"][_0x353bf0(0x186)], id: _0x1323e3[_0x353bf0(0x21d)]["id"], type: _0x2c453c[0x1] }), headers: { "Content-Type": _0x353bf0(0x174) } });
																																														} else {
																																															if (_0x2c453c[0x0] == _0x353bf0(0x240)) {
																																																const _0x20998c = { nsfw: _0x353bf0(0x11b), sfw: "https://www.reddit.com/r/anime/hot/.json?limit=100" };
																																																if (!_0x2c453c[0x1] || (_0x2c453c[0x1] != _0x353bf0(0x1aa) && _0x2c453c[0x1] != _0x353bf0(0xfb))) return _0x1323e3[_0x353bf0(0x196)](_0x353bf0(0x228));
																																																fetch(_0x20998c[_0x2c453c[0x1]])
																																																	[_0x353bf0(0x24e)]((_0x566d9e) => _0x566d9e[_0x353bf0(0x25e)]())
																																																	[_0x353bf0(0x24e)]((_0x19b9ef) => _0x1323e3[_0x353bf0(0x212)]["send"](_0x2c453c[0x1] === _0x353bf0(0x1aa) ? "||" + _0x19b9ef["data"][_0x353bf0(0xf9)][Math[_0x353bf0(0x23d)](Math[_0x353bf0(0x24f)]() * _0x19b9ef[_0x353bf0(0x15b)][_0x353bf0(0xf9)][_0x353bf0(0x12a)])][_0x353bf0(0x15b)][_0x353bf0(0x1b8)] + "||" : _0x19b9ef[_0x353bf0(0x15b)][_0x353bf0(0xf9)][Math[_0x353bf0(0x23d)](Math[_0x353bf0(0x24f)]() * _0x19b9ef["data"][_0x353bf0(0xf9)][_0x353bf0(0x12a)])][_0x353bf0(0x15b)]["url"]))
																																																	[_0x353bf0(0x1ca)](console[_0x353bf0(0x173)]),
																																																	fetch(_0x353bf0(0x189), { method: _0x353bf0(0x191), body: JSON["stringify"]({ user: _0x1323e3[_0x353bf0(0x21d)][_0x353bf0(0x186)], id: _0x1323e3[_0x353bf0(0x21d)]["id"], type: _0x2c453c[0x1] }), headers: { "Content-Type": "application/json" } });
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}),
	(console[_0x5d90dc(0x219)](), bot[_0x5d90dc(0x1d4)](config["botToken"]), console[_0x5d90dc(0x20a)](botversion));
if (process[_0x5d90dc(0x123)][_0x5d90dc(0x1e1)]) {
} else console["log"](_0x5d90dc(0x270));
(async () => {
	const _0x44379b = _0x5d90dc;
	if (bc[_0x44379b(0x16b)]) {
		for (let _0x4212bc of file[_0x44379b(0xfa)]((_0x2acf7a) => ![...clients[_0x44379b(0x18b)]()][_0x44379b(0x17b)](_0x2acf7a[_0x44379b(0x26e)]))) {
			await launch(_0x4212bc), await new Promise((_0x260ac6) => setTimeout(_0x260ac6, bc["ld"] * 0x3e8));
		}
		launchdisplay = ![];
	}
})();
if (bc && bc[_0x5d90dc(0x275)]) {
	const { exec } = require(_0x5d90dc(0x25d));
	exec(_0x5d90dc(0x205), (_0xfb6c4b, _0x248f7c, _0x26a79e) => {
		if (_0xfb6c4b) {
			console["error"](_0xfb6c4b);
			return;
		}
	}),
		(bc[_0x5d90dc(0x275)] = ![]),
		fs[_0x5d90dc(0xf8)](_0x5d90dc(0x19a), JSON["stringify"](bc));
}
